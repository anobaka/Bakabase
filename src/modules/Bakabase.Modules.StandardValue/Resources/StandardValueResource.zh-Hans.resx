<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="StandardValue_HandlerNotFound" xml:space="preserve">
    <value>未找到类型[{0}]对应的标准数据处理器</value>
  </data>
  <data name="ConversionRule_Directly_Name" xml:space="preserve">
    <value>直接转换</value>
  </data>
  <data name="ConversionRule_Incompatible_Name" xml:space="preserve">
    <value>不兼容</value>
  </data>
  <data name="ConversionRule_ValuesWillBeMerged_Name" xml:space="preserve">
    <value>数据会被合并</value>
  </data>
  <data name="ConversionRule_DateWillBeLost_Name" xml:space="preserve">
    <value>日期将会丢失</value>
  </data>
  <data name="ConversionRule_StringToTag_Name" xml:space="preserve">
    <value>文本转标签</value>
  </data>
  <data name="ConversionRule_OnlyFirstValidRemains_Name" xml:space="preserve">
    <value>只有第一个有效值会被保留</value>
  </data>
  <data name="ConversionRule_StringToDateTime_Name" xml:space="preserve">
    <value>文本转日期时间</value>
  </data>
  <data name="ConversionRule_StringToTime_Name" xml:space="preserve">
    <value>文本转时间</value>
  </data>
  <data name="ConversionRule_UrlWillBeLost_Name" xml:space="preserve">
    <value>链接地址将会丢失</value>
  </data>
  <data name="ConversionRule_StringToNumber_Name" xml:space="preserve">
    <value>文本转数字</value>
  </data>
  <data name="ConversionRule_Trim_Name" xml:space="preserve">
    <value>移除首尾空格和换行符</value>
  </data>
  <data name="ConversionRule_StringToLink_Name" xml:space="preserve">
    <value>文本转链接</value>
  </data>
  <data name="ConversionRule_ValueWillBeSplit_Name" xml:space="preserve">
    <value>数据会被分割</value>
  </data>
  <data name="ConversionRule_BooleanToNumber_Name" xml:space="preserve">
    <value>是/否转数字</value>
  </data>
  <data name="ConversionRule_TimeToDateTime_Name" xml:space="preserve">
    <value>时间转日期</value>
  </data>
  <data name="ConversionRule_TagGroupWillBeLost_Name" xml:space="preserve">
    <value>标签组名将会丢失</value>
  </data>
  <data name="ConversionRule_ValueToBoolean_Name" xml:space="preserve">
    <value>其他数据转是/否</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="ConversionRule_Directly_Description" type="System.Resources.ResXNullRef, System.Windows.Forms">
    <value />
  </data>
  <data name="ConversionRule_Incompatible_Description" xml:space="preserve">
    <value>数据将会丢失</value>
  </data>
  <data name="ConversionRule_ValuesWillBeMerged_Description" xml:space="preserve">
    <value>1. 通常情况下将会使用分隔符,合并数据
2. 合并标签的分组和名称时会使用:作为分隔符
3. 合并多级数据的分支数据时，会使用/作为分隔符
4. 链接数据将会被合并为类似[文本](链接)的文本</value>
  </data>
  <data name="ConversionRule_DateWillBeLost_Description" type="System.Resources.ResXNullRef, System.Windows.Forms">
    <value />
  </data>
  <data name="ConversionRule_StringToTag_Description" xml:space="preserve">
    <value>1. 如果文本格式类似xxx:yyy，那么它将会被转换为一个组名=xxx，名称=yyy的标签
2. 否则它将会转换为一个名称=当前文本的标签</value>
  </data>
  <data name="ConversionRule_OnlyFirstValidRemains_Description" type="System.Resources.ResXNullRef, System.Windows.Forms">
    <value />
  </data>
  <data name="ConversionRule_StringToDateTime_Description" xml:space="preserve">
    <value>如果无法转换，数据将会丢失</value>
  </data>
  <data name="ConversionRule_StringToTime_Description" xml:space="preserve">
    <value>如果无法转换，数据将会丢失</value>
  </data>
  <data name="ConversionRule_UrlWillBeLost_Description" type="System.Resources.ResXNullRef, System.Windows.Forms">
    <value />
  </data>
  <data name="ConversionRule_StringToNumber_Description" xml:space="preserve">
    <value>如果无法转换，数据将会丢失</value>
  </data>
  <data name="ConversionRule_Trim_Description" type="System.Resources.ResXNullRef, System.Windows.Forms">
    <value />
  </data>
  <data name="ConversionRule_StringToLink_Description" xml:space="preserve">
    <value>1. 如果文本格式类似[aaa](url)，那么他将会被转换为一个文本=aaa、链接地址=url的链接数据
2. 否则将会被转换为一个文本=当前文本、链接地址为空的链接数据</value>
  </data>
  <data name="ConversionRule_ValueWillBeSplit_Description" type="System.Resources.ResXNullRef, System.Windows.Forms">
    <value />
  </data>
  <data name="ConversionRule_BooleanToNumber_Description" xml:space="preserve">
    <value>是会被转换成1，否会被转换成0</value>
  </data>
  <data name="ConversionRule_TimeToDateTime_Description" xml:space="preserve">
    <value>将会使用今天作为日期</value>
  </data>
  <data name="ConversionRule_TagGroupWillBeLost_Description" type="System.Resources.ResXNullRef, System.Windows.Forms">
    <value />
  </data>
  <data name="ConversionRule_ValueToBoolean_Description" xml:space="preserve">
    <value>1. 0会被转换为否
2. trUe会被转换为是，falsE会被转换为否（大小写不敏感）
3. 其他非空值会被转换为是</value>
  </data>
</root>