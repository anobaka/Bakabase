/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/alias": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["SearchAliasGroups"];
        put: operations["PatchAlias"];
        post: operations["AddAlias"];
        delete: operations["DeleteAlias"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/alias/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["DeleteAliasGroups"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/alias/merge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["MergeAliasGroups"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/alias/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ExportAliases"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/alias/import": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ImportAliases"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/app/initialized": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CheckAppInitialized"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/app/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetAppInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/app/terms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AcceptTerms"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/app/data-path": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["MoveCoreData"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/background-task": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetAllBackgroundTasks"];
        put?: never;
        post?: never;
        delete: operations["ClearInactiveBackgroundTasks"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/background-task/by-name": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetBackgroundTaskByName"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/background-task/{id}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["StopBackgroundTask"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/background-task/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["RemoveBackgroundTask"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bilibili/favorites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetBiliBiliFavorites"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulk-modification/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetBulkModification"];
        put?: never;
        post: operations["DuplicateBulkModification"];
        delete: operations["DeleteBulkModification"];
        options?: never;
        head?: never;
        patch: operations["PatchBulkModification"];
        trace?: never;
    };
    "/bulk-modification/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetAllBulkModifications"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulk-modification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddBulkModification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulk-modification/{id}/filtered-resources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["FilterResourcesInBulkModification"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulk-modification/{id}/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["PreviewBulkModification"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulk-modification/{bmId}/diffs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["SearchBulkModificationDiffs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulk-modification/{id}/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ApplyBulkModification"];
        delete: operations["RevertBulkModification"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cache": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetCacheOverview"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cache/category/{categoryId}/type/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["DeleteResourceCacheByCategoryIdAndCacheType"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/category/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetCategory"];
        put?: never;
        post?: never;
        delete: operations["DeleteCategory"];
        options?: never;
        head?: never;
        patch: operations["PatchCategory"];
        trace?: never;
    };
    "/category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetAllCategories"];
        put?: never;
        post: operations["AddCategory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/category/{id}/duplication": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DuplicateCategory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/category/{id}/resource-display-name-template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["PutCategoryResourceDisplayNameTemplate"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/category/{id}/component": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["ConfigureCategoryComponents"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/category/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["SortCategories"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/category/{id}/custom-properties": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["BindCustomPropertiesToCategory"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/category/{categoryId}/custom-property/{customPropertyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["BindCustomPropertyToCategory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/category/{id}/resource/resource-display-name-template/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["PreviewCategoryDisplayNameTemplate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/category/{id}/enhancer/{enhancerId}/options": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetCategoryEnhancerOptions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["PatchCategoryEnhancerOptions"];
        trace?: never;
    };
    "/category/{id}/enhancer/{enhancerId}/options/target": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["DeleteCategoryEnhancerTargetOptions"];
        options?: never;
        head?: never;
        patch: operations["PatchCategoryEnhancerTargetOptions"];
        trace?: never;
    };
    "/category/{id}/enhancer/{enhancerId}/options/target/property": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["UnbindCategoryEnhancerTargetProperty"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/category/{id}/synchronization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["StartSyncingCategoryResources"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/component": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetComponentDescriptors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/component/key": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetComponentDescriptorByKey"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/component/dependency/discovery": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["DiscoverDependentComponent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/component/dependency/latest-version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetDependentComponentLatestVersion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/component/dependency": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["InstallDependentComponent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/component-options": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddComponentOptions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/component-options/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["PutComponentOptions"];
        post?: never;
        delete: operations["RemoveComponentOptions"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/constant/extension-media-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetAllExtensionMediaTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/constant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                        "application/json": string;
                        "text/json": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/custom-property/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetAllCustomProperties"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/custom-property/ids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetCustomPropertyByKeys"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/custom-property": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddCustomProperty"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/custom-property/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["PutCustomProperty"];
        post?: never;
        delete: operations["RemoveCustomProperty"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/custom-property/{sourceCustomPropertyId}/{targetType}/conversion-preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["PreviewCustomPropertyTypeConversion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/custom-property/conversion-rule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetCustomPropertyConversionRules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/custom-property/{id}/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["ChangeCustomPropertyType"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/custom-property/{id}/options/adding-new-data-dynamically": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["EnableAddingNewDataDynamicallyForCustomProperty"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/custom-property/{id}/value-usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetCustomPropertyValueUsage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/custom-property/type-conversion-overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TestCustomPropertyTypeConversion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dashboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetStatistics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/download-task/downloader/naming-definitions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetAllDownloaderNamingDefinitions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/download-task": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetAllDownloadTasks"];
        put?: never;
        post: operations["CreateDownloadTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/download-task/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetDownloadTask"];
        put: operations["PutDownloadTask"];
        post?: never;
        delete: operations["RemoveDownloadTask"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/download-task/ids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["RemoveDownloadTasksByIds"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/download-task/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["StartDownloadTasks"];
        delete: operations["StopDownloadTasks"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resource/{resourceId}/enhancement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetResourceEnhancements"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resource/{resourceId}/enhancer/{enhancerId}/enhancement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EnhanceResourceByEnhancer"];
        delete: operations["DeleteResourceEnhancement"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resource/{resourceId}/enhancer/{enhancerId}/enhancement/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ApplyEnhancementContextDataForResourceByEnhancer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/category/{categoryId}/enhancer/{enhancerId}/enhancement/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ApplyEnhancementContextDataByEnhancerAndCategory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media-library/{mediaLibraryId}/enhancement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["DeleteByEnhancementsMediaLibrary"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/category/{categoryId}/enhancement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["DeleteEnhancementsByCategory"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/category/{categoryId}/enhancer/{enhancerId}/enhancements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["DeleteEnhancementsByCategoryAndEnhancer"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enhancer/{enhancerId}/enhancement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["DeleteEnhancementsByEnhancer"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enhancer/descriptor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetAllEnhancerDescriptors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/top-level-file-system-entries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetTopLevelFileSystemEntryNames"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/task-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetEntryTaskInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/iwfs-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetIwFsInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/iwfs-entry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetIwFsEntry"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/directory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["CreateDirectory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/children/iwfs-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetChildrenIwFsInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["RemoveFiles"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/name": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["RenameFile"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/recycle-bin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["OpenRecycleBin"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/extract-and-remove-directory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ExtractAndRemoveDirectory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/move-entries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["MoveEntries"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/same-name-entries-in-working-directory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSameNameEntriesInWorkingDirectory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/same-name-entry-in-working-directory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["RemoveSameNameEntryInWorkingDirectory"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/standardize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["StandardizeEntryName"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/play": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["PlayFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/decompression": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DecompressFiles"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/icon": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetIconData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/all-files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetAllFiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/compressed-file/entries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetCompressedFileEntries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/file-extension-counts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetFileExtensionCounts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/group-preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["PreviewFileSystemEntriesGroupResult"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["MergeFileSystemEntries"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/file-processor-watcher": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["StartWatchingChangesInFileProcessorWorkspace"];
        delete: operations["StopWatchingChangesInFileProcessorWorkspace"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/is-file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CheckPathIsFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/gui/files-selector": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["OpenFilesSelector"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/gui/file-selector": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["OpenFileSelector"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/gui/folder-selector": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["OpenFolderSelector"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/gui/url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["OpenUrlInDefaultBrowser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetAllLogs"];
        put?: never;
        post?: never;
        delete: operations["ClearAllLog"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/log/filtered": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["SearchLogs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/log/unread/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetUnreadLogCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/log/{id}/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["ReadLog"];
        trace?: never;
    };
    "/log/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["ReadAllLog"];
        trace?: never;
    };
    "/media-library": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetAllMediaLibraries"];
        put?: never;
        post: operations["AddMediaLibrary"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media-library/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetMediaLibrary"];
        put: operations["PatchMediaLibrary"];
        post?: never;
        delete: operations["DeleteMediaLibrary"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media-library/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["StartSyncMediaLibrary"];
        post?: never;
        delete: operations["StopSyncMediaLibrary"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media-library/path-configuration-validation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ValidatePathConfiguration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media-library/orders-in-category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["SortMediaLibrariesInCategory"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media-library/{id}/path-configuration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddMediaLibraryPathConfiguration"];
        delete: operations["RemoveMediaLibraryPathConfiguration"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media-library/bulk-add/{cId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddMediaLibrariesInBulk"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media-library/{mlId}/path-configuration/root-paths": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddMediaLibraryRootPathsInBulk"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media-library/{id}/synchronization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["StartSyncingMediaLibraryResources"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/options/app": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetAppOptions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["PatchAppOptions"];
        trace?: never;
    };
    "/options/ui": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetUIOptions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["PatchUIOptions"];
        trace?: never;
    };
    "/options/bilibili": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetBilibiliOptions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["PatchBilibiliOptions"];
        trace?: never;
    };
    "/options/exhentai": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetExHentaiOptions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["PatchExHentaiOptions"];
        trace?: never;
    };
    "/options/filesystem": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetFileSystemOptions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["PatchFileSystemOptions"];
        trace?: never;
    };
    "/options/javlibrary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetJavLibraryOptions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["PatchJavLibraryOptions"];
        trace?: never;
    };
    "/options/pixiv": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetPixivOptions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["PatchPixivOptions"];
        trace?: never;
    };
    "/options/resource": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetResourceOptions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["PatchResourceOptions"];
        trace?: never;
    };
    "/options/thirdparty": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetThirdPartyOptions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["PatchThirdPartyOptions"];
        trace?: never;
    };
    "/options/network": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetNetworkOptions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["PatchNetworkOptions"];
        trace?: never;
    };
    "/options/enhancer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetEnhancerOptions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["PatchEnhancerOptions"];
        trace?: never;
    };
    "/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["SearchPasswords"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/password/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetAllPasswords"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/password/{password}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["DeletePassword"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlist/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetPlaylist"];
        put?: never;
        post?: never;
        delete: operations["DeletePlaylist"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetAllPlaylists"];
        put: operations["PutPlaylist"];
        post: operations["AddPlaylist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlist/{id}/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetPlaylistFiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/property/pool/{pool}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetPropertiesByPool"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/property/property-types-for-manually-setting-value": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetAvailablePropertyTypesForManuallySettingValue"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/property/pool/{pool}/id/{id}/biz-value": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetPropertyBizValue"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/property/pool/{pool}/id/{id}/db-value": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetPropertyDbValue"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resource/search-operation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetSearchOperationsForProperty"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resource/filter-value-property": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetFilterValueProperty"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resource/last-search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetLastResourceSearch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resource/saved-search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetSavedSearches"];
        put?: never;
        post: operations["SaveNewResourceSearch"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resource/saved-search/{idx}/name": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["PutSavedSearchName"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resource/saved-search/{idx}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["DeleteSavedSearch"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resource/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["SearchResources"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resource/keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetResourcesByKeys"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resource/directory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["OpenResourceDirectory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resource/{id}/cover": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["DiscoverResourceCover"];
        put: operations["SaveCover"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resource/{id}/playable-files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetResourcePlayableFiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resource/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["MoveResources"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resource/{id}/task": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["ClearResourceTask"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resource/{id}/previewer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetResourceDataForPreviewer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resource/{id}/property-value": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["PutResourcePropertyValue"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resource/{resourceId}/play": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["PlayResourceFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resource/ids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["DeleteResourcesByKeys"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resource/unknown": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetUnknownResources"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resource/unknown/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetUnknownResourcesCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resource/{id}/pin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["PinResource"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resource/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["TransferResourceData"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resource/paths": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["SearchResourcePaths"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/special-text": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetAllSpecialTexts"];
        put?: never;
        post: operations["AddSpecialText"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/special-text/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["PatchSpecialText"];
        post?: never;
        delete: operations["DeleteSpecialText"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/special-text/prefabs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddSpecialTextPrefabs"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/special-text/pretreatment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["PretreatText"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/third-party/request-statistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetAllThirdPartyRequestStatistics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tool/open": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["OpenFileOrDirectory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tool/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Test */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tool/cookie-validation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ValidateCookie"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tool/thumbnail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetThumbnail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tool/match-all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["TestMatchAll"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/updater/app/new-version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetNewAppVersion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/updater/app/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["StartUpdatingApp"];
        delete: operations["StopUpdatingApp"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/updater/app/restart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["RestartAndUpdateApp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        "Bakabase.Abstractions.Models.Db.CategoryComponent": {
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            categoryId: number;
            componentKey: string;
            componentType: components["schemas"]["Bakabase.InsideWorld.Models.Constants.ComponentType"];
            descriptor: components["schemas"]["Bakabase.Abstractions.Models.Domain.ComponentDescriptor"];
        };
        "Bakabase.Abstractions.Models.Domain.Category": {
            /** Format: int32 */
            id: number;
            name: string;
            color?: string;
            /** Format: date-time */
            createDt: string;
            isValid: boolean;
            /** @deprecated */
            message?: string;
            /** Format: int32 */
            order: number;
            componentsData?: components["schemas"]["Bakabase.Abstractions.Models.Db.CategoryComponent"][];
            coverSelectionOrder: components["schemas"]["Bakabase.InsideWorld.Models.Constants.CoverSelectOrder"];
            enhancementOptions?: components["schemas"]["Bakabase.InsideWorld.Models.Models.Dtos.ResourceCategoryEnhancementOptions"];
            generateNfo: boolean;
            resourceDisplayNameTemplate?: string;
            customProperties?: components["schemas"]["Bakabase.Abstractions.Models.Domain.CustomProperty"][];
            enhancerOptions?: components["schemas"]["Bakabase.Abstractions.Models.Domain.CategoryEnhancerOptions"][];
        };
        "Bakabase.Abstractions.Models.Domain.CategoryEnhancerOptions": {
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            categoryId: number;
            /** Format: int32 */
            enhancerId: number;
            active: boolean;
        };
        "Bakabase.Abstractions.Models.Domain.ComponentDescriptor": {
            type: components["schemas"]["Bakabase.InsideWorld.Models.Constants.ComponentDescriptorType"];
            componentType: components["schemas"]["Bakabase.InsideWorld.Models.Constants.ComponentType"];
            assemblyQualifiedTypeName: string;
            name: string;
            description?: string;
            message?: string;
            optionsJson?: string;
            /** Format: int32 */
            optionsId?: number;
            version: string;
            dataVersion: string;
            optionsType?: components["schemas"]["System.Type"];
            readonly optionsJsonSchema?: string;
            readonly id?: string;
            readonly canBeInstantiated: boolean;
            associatedCategories?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Category"][];
        };
        /**
         * Format: int32
         * @description [1: ContextCreated, 2: ContextApplied]
         * @enum {integer}
         */
        "Bakabase.Abstractions.Models.Domain.Constants.EnhancementRecordStatus": 1 | 2;
        /**
         * Format: int32
         * @description [1: NotAcceptTerms, 2: NeedRestart]
         * @enum {integer}
         */
        "Bakabase.Abstractions.Models.Domain.Constants.InitializationContentType": 1 | 2;
        /**
         * Format: int32
         * @description [1: Internal, 2: Reserved, 4: Custom, 7: All]
         * @enum {integer}
         */
        "Bakabase.Abstractions.Models.Domain.Constants.PropertyPool": 1 | 2 | 4 | 7;
        /**
         * Format: int32
         * @description [1: SingleLineText, 2: MultilineText, 3: SingleChoice, 4: MultipleChoice, 5: Number, 6: Percentage, 7: Rating, 8: Boolean, 9: Link, 10: Attachment, 11: Date, 12: DateTime, 13: Time, 14: Formula, 15: Multilevel, 16: Tags]
         * @enum {integer}
         */
        "Bakabase.Abstractions.Models.Domain.Constants.PropertyType": 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
        /**
         * Format: int32
         * @description [0: Manual, 1: Synchronization, 1000: BakabaseEnhancer, 1001: ExHentaiEnhancer, 1002: BangumiEnhancer, 1003: DLsiteEnhancer, 1004: RegexEnhancer]
         * @enum {integer}
         */
        "Bakabase.Abstractions.Models.Domain.Constants.PropertyValueScope": 0 | 1 | 1000 | 1001 | 1002 | 1003 | 1004;
        /**
         * Format: int32
         * @description [12: Introduction, 13: Rating, 22: Cover]
         * @enum {integer}
         */
        "Bakabase.Abstractions.Models.Domain.Constants.ReservedProperty": 12 | 13 | 22;
        /**
         * Format: int32
         * @description [1: Covers, 2: PlayableFiles]
         * @enum {integer}
         */
        "Bakabase.Abstractions.Models.Domain.Constants.ResourceCacheType": 1 | 2;
        /**
         * Format: int32
         * @description [1: IsParent, 2: Pinned, 4: PathDoesNotExist, 8: UnknownMediaLibrary]
         * @enum {integer}
         */
        "Bakabase.Abstractions.Models.Domain.Constants.ResourceTag": 1 | 2 | 4 | 8;
        /**
         * Format: int32
         * @description [1: And, 2: Or]
         * @enum {integer}
         */
        "Bakabase.Abstractions.Models.Domain.Constants.SearchCombinator": 1 | 2;
        /**
         * Format: int32
         * @description [1: Equals, 2: NotEquals, 3: Contains, 4: NotContains, 5: StartsWith, 6: NotStartsWith, 7: EndsWith, 8: NotEndsWith, 9: GreaterThan, 10: LessThan, 11: GreaterThanOrEquals, 12: LessThanOrEquals, 13: IsNull, 14: IsNotNull, 15: In, 16: NotIn, 17: Matches, 18: NotMatches]
         * @enum {integer}
         */
        "Bakabase.Abstractions.Models.Domain.Constants.SearchOperation": 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18;
        /**
         * Format: int32
         * @description [1: Useless, 3: Wrapper, 4: Standardization, 6: Volume, 7: Trim, 8: DateTime, 9: Language]
         * @enum {integer}
         */
        "Bakabase.Abstractions.Models.Domain.Constants.SpecialTextType": 1 | 3 | 4 | 6 | 7 | 8 | 9;
        /**
         * Format: int32
         * @description [1: String, 2: ListString, 3: Decimal, 4: Link, 5: Boolean, 6: DateTime, 7: Time, 8: ListListString, 9: ListTag]
         * @enum {integer}
         */
        "Bakabase.Abstractions.Models.Domain.Constants.StandardValueType": 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
        "Bakabase.Abstractions.Models.Domain.CustomProperty": {
            /** Format: int32 */
            id: number;
            name: string;
            type: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyType"];
            /** Format: date-time */
            createdAt: string;
            categories?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Category"][];
            options?: unknown;
            /** Format: int32 */
            valueCount?: number;
        };
        "Bakabase.Abstractions.Models.Domain.CustomPropertyValue": {
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            propertyId: number;
            /** Format: int32 */
            resourceId: number;
            property?: components["schemas"]["Bakabase.Abstractions.Models.Domain.CustomProperty"];
            value?: unknown;
            /** Format: int32 */
            scope: number;
            readonly bizKey: string;
            bizValue?: unknown;
        };
        "Bakabase.Abstractions.Models.Domain.MediaLibrary": {
            /** Format: int32 */
            id: number;
            name: string;
            /** Format: int32 */
            categoryId: number;
            /** Format: int32 */
            order: number;
            /** Format: int32 */
            resourceCount: number;
            fileSystemInformation?: {
                [key: string]: components["schemas"]["Bakabase.InsideWorld.Models.Models.Aos.MediaLibraryFileSystemInformation"];
            };
            category?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Category"];
            pathConfigurations?: components["schemas"]["Bakabase.Abstractions.Models.Domain.PathConfiguration"][];
        };
        "Bakabase.Abstractions.Models.Domain.PathConfiguration": {
            path?: string;
            rpmValues?: components["schemas"]["Bakabase.Abstractions.Models.Domain.PropertyPathSegmentMatcherValue"][];
        };
        "Bakabase.Abstractions.Models.Domain.PathConfigurationTestResult": {
            rootPath: string;
            resources: components["schemas"]["Bakabase.Abstractions.Models.Domain.PathConfigurationTestResult+Resource"][];
            customPropertyMap: {
                [key: string]: components["schemas"]["Bakabase.Abstractions.Models.Domain.CustomProperty"];
            };
        };
        "Bakabase.Abstractions.Models.Domain.PathConfigurationTestResult+Resource": {
            isDirectory: boolean;
            relativePath: string;
            segmentAndMatchedValues: components["schemas"]["Bakabase.Abstractions.Models.Domain.PathConfigurationTestResult+Resource+SegmentMatchResult"][];
            globalMatchedValues: components["schemas"]["Bakabase.Abstractions.Models.Domain.PathConfigurationTestResult+Resource+GlobalMatchedValue"][];
            customPropertyIdValueMap: {
                [key: string]: unknown;
            };
        };
        "Bakabase.Abstractions.Models.Domain.PathConfigurationTestResult+Resource+GlobalMatchedValue": {
            propertyKey: components["schemas"]["Bakabase.Abstractions.Models.Domain.PathConfigurationTestResult+Resource+SegmentPropertyKey"];
            textValues: string[];
        };
        "Bakabase.Abstractions.Models.Domain.PathConfigurationTestResult+Resource+SegmentMatchResult": {
            segmentText: string;
            propertyKeys: components["schemas"]["Bakabase.Abstractions.Models.Domain.PathConfigurationTestResult+Resource+SegmentPropertyKey"][];
        };
        "Bakabase.Abstractions.Models.Domain.PathConfigurationTestResult+Resource+SegmentPropertyKey": {
            /** Format: int32 */
            id: number;
            isCustom: boolean;
        };
        "Bakabase.Abstractions.Models.Domain.PropertyPathSegmentMatcherValue": {
            fixedText?: string;
            /** Format: int32 */
            layer?: number;
            regex?: string;
            /** Format: int32 */
            propertyId: number;
            isCustomProperty: boolean;
            valueType: components["schemas"]["Bakabase.InsideWorld.Models.Constants.ResourceMatcherValueType"];
            propertyName?: string;
            readonly isSecondaryProperty: boolean;
            readonly isResourceProperty: boolean;
            readonly isValid: boolean;
        };
        "Bakabase.Abstractions.Models.Domain.ReservedPropertyValue": {
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            resourceId: number;
            /** Format: int32 */
            scope: number;
            /** Format: double */
            rating?: number;
            introduction?: string;
            coverPaths?: string[];
        };
        "Bakabase.Abstractions.Models.Domain.Resource": {
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            mediaLibraryId: number;
            /** Format: int32 */
            categoryId: number;
            fileName: string;
            directory: string;
            path: string;
            displayName: string;
            /** Format: int32 */
            parentId?: number;
            readonly hasChildren: boolean;
            isFile: boolean;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            fileCreatedAt: string;
            /** Format: date-time */
            fileModifiedAt: string;
            coverPaths?: string[];
            tags: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.ResourceTag"][];
            parent?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Resource"];
            properties?: {
                [key: string]: {
                    [key: string]: components["schemas"]["Bakabase.Abstractions.Models.Domain.Resource+Property"];
                };
            };
            readonly pinned: boolean;
            cache?: components["schemas"]["Bakabase.Abstractions.Models.Domain.ResourceCache"];
            category?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Category"];
            mediaLibraryName?: string;
        };
        "Bakabase.Abstractions.Models.Domain.Resource+Property": {
            name?: string;
            values?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Resource+Property+PropertyValue"][];
            dbValueType: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.StandardValueType"];
            bizValueType: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.StandardValueType"];
            type: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyType"];
            visible: boolean;
        };
        "Bakabase.Abstractions.Models.Domain.Resource+Property+PropertyValue": {
            /** Format: int32 */
            scope: number;
            value?: unknown;
            bizValue?: unknown;
            aliasAppliedBizValue?: unknown;
        };
        "Bakabase.Abstractions.Models.Domain.ResourceCache": {
            coverPaths?: string[];
            hasMorePlayableFiles: boolean;
            playableFilePaths?: string[];
            cachedTypes: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.ResourceCacheType"][];
        };
        "Bakabase.Abstractions.Models.Domain.SpecialText": {
            /** Format: int32 */
            id: number;
            value1: string;
            value2?: string;
            type: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.SpecialTextType"];
        };
        "Bakabase.Abstractions.Models.Dto.CustomPropertyAddOrPutDto": {
            name: string;
            type: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyType"];
            options?: string;
        };
        "Bakabase.Abstractions.Models.Dto.MediaLibraryAddDto": {
            name: string;
            /** Format: int32 */
            categoryId: number;
            pathConfigurations?: components["schemas"]["Bakabase.Abstractions.Models.Domain.PathConfiguration"][];
        };
        "Bakabase.Abstractions.Models.Dto.MediaLibraryPatchDto": {
            name?: string;
            pathConfigurations?: components["schemas"]["Bakabase.Abstractions.Models.Domain.PathConfiguration"][];
            /** Format: int32 */
            order?: number;
        };
        "Bakabase.Abstractions.Models.Input.CategoryAddInputModel": {
            name: string;
        };
        "Bakabase.Abstractions.Models.Input.CategoryComponentConfigureInputModel": {
            type: components["schemas"]["Bakabase.InsideWorld.Models.Constants.ComponentType"];
            componentKeys: string[];
            enhancementOptions?: components["schemas"]["Bakabase.InsideWorld.Models.Models.Dtos.ResourceCategoryEnhancementOptions"];
        };
        "Bakabase.Abstractions.Models.Input.CategoryCustomPropertyBindInputModel": {
            customPropertyIds?: number[];
        };
        "Bakabase.Abstractions.Models.Input.CategoryDuplicateInputModel": {
            name: string;
        };
        "Bakabase.Abstractions.Models.Input.CategoryPatchInputModel": {
            name?: string;
            color?: string;
            coverSelectionOrder?: components["schemas"]["Bakabase.InsideWorld.Models.Constants.CoverSelectOrder"];
            /** Format: int32 */
            order?: number;
            generateNfo?: boolean;
        };
        "Bakabase.Abstractions.Models.Input.MediaLibraryAddInBulkInputModel": {
            nameAndPaths: {
                [key: string]: string[] | null;
            };
        };
        "Bakabase.Abstractions.Models.Input.MediaLibraryPathConfigurationAddInputModel": {
            path: string;
        };
        "Bakabase.Abstractions.Models.Input.MediaLibraryRootPathsAddInBulkInputModel": {
            rootPaths: string[];
        };
        "Bakabase.Abstractions.Models.Input.ResourcePropertyValuePutInputModel": {
            /** Format: int32 */
            propertyId: number;
            isCustomProperty: boolean;
            value?: string;
        };
        "Bakabase.Abstractions.Models.Input.ResourceSearchOrderInputModel": {
            property: components["schemas"]["Bakabase.InsideWorld.Models.Constants.Aos.ResourceSearchSortableProperty"];
            asc: boolean;
        };
        "Bakabase.Abstractions.Models.Input.ResourceTransferInputModel": {
            items: components["schemas"]["Bakabase.Abstractions.Models.Input.ResourceTransferInputModel+Item"][];
            keepMediaLibraryForAll: boolean;
            deleteAllSourceResources: boolean;
        };
        "Bakabase.Abstractions.Models.Input.ResourceTransferInputModel+Item": {
            /** Format: int32 */
            fromId: number;
            /** Format: int32 */
            toId: number;
            keepMediaLibrary: boolean;
            deleteSourceResource: boolean;
        };
        "Bakabase.Abstractions.Models.Input.SpecialTextAddInputModel": {
            type: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.SpecialTextType"];
            value1: string;
            value2?: string;
        };
        "Bakabase.Abstractions.Models.Input.SpecialTextPatchInputModel": {
            value1?: string;
            value2?: string;
        };
        "Bakabase.Abstractions.Models.View.CacheOverviewViewModel": {
            categoryCaches: components["schemas"]["Bakabase.Abstractions.Models.View.CacheOverviewViewModel+CategoryCacheViewModel"][];
        };
        "Bakabase.Abstractions.Models.View.CacheOverviewViewModel+CategoryCacheViewModel": {
            /** Format: int32 */
            categoryId: number;
            categoryName: string;
            resourceCacheCountMap: {
                [key: string]: number;
            };
            /** Format: int32 */
            resourceCount: number;
        };
        "Bakabase.Abstractions.Models.View.CategoryResourceDisplayNameViewModel": {
            /** Format: int32 */
            resourceId: number;
            resourcePath: string;
            segments: components["schemas"]["Bakabase.Abstractions.Models.View.CategoryResourceDisplayNameViewModel+Segment"][];
        };
        "Bakabase.Abstractions.Models.View.CategoryResourceDisplayNameViewModel+Segment": {
            type: components["schemas"]["Bakabase.Abstractions.Models.View.Constants.CategoryResourceDisplayNameSegmentType"];
            text: string;
            wrapperPairId?: string;
        };
        /**
         * Format: int32
         * @description [1: StaticText, 2: Property, 3: LeftWrapper, 4: RightWrapper]
         * @enum {integer}
         */
        "Bakabase.Abstractions.Models.View.Constants.CategoryResourceDisplayNameSegmentType": 1 | 2 | 3 | 4;
        "Bakabase.Infrastructures.Components.App.Models.RequestModels.AppOptionsPatchRequestModel": {
            language?: string;
            enablePreReleaseChannel?: boolean;
            enableAnonymousDataTracking?: boolean;
            closeBehavior?: components["schemas"]["Bakabase.Infrastructures.Components.Gui.CloseBehavior"];
            uiTheme?: components["schemas"]["Bakabase.Infrastructures.Components.Gui.UiTheme"];
        };
        "Bakabase.Infrastructures.Components.App.Models.RequestModels.CoreDataMoveRequestModel": {
            dataPath: string;
        };
        "Bakabase.Infrastructures.Components.App.Models.ResponseModels.AppInfo": {
            appDataPath?: string;
            coreVersion?: string;
            logPath?: string;
            backupPath?: string;
            tempFilesPath?: string;
            notAcceptTerms: boolean;
            needRestart: boolean;
        };
        "Bakabase.Infrastructures.Components.App.Upgrade.Abstractions.AppVersionInfo": {
            version?: string;
            installers?: components["schemas"]["Bakabase.Infrastructures.Components.App.Upgrade.Abstractions.AppVersionInfo+Installer"][];
        };
        "Bakabase.Infrastructures.Components.App.Upgrade.Abstractions.AppVersionInfo+Installer": {
            osPlatform?: components["schemas"]["System.Runtime.InteropServices.OSPlatform"];
            osArchitecture: components["schemas"]["System.Runtime.InteropServices.Architecture"];
            name?: string;
            url?: string;
            /** Format: int64 */
            size: number;
        };
        "Bakabase.Infrastructures.Components.Configurations.App.AppOptions": {
            language?: string;
            version?: string;
            enablePreReleaseChannel: boolean;
            enableAnonymousDataTracking: boolean;
            wwwRootPath?: string;
            dataPath?: string;
            prevDataPath?: string;
            closeBehavior: components["schemas"]["Bakabase.Infrastructures.Components.Gui.CloseBehavior"];
            uiTheme: components["schemas"]["Bakabase.Infrastructures.Components.Gui.UiTheme"];
        };
        /**
         * Format: int32
         * @description [0: Prompt, 1: Exit, 2: Minimize, 1000: Cancel]
         * @enum {integer}
         */
        "Bakabase.Infrastructures.Components.Gui.CloseBehavior": 0 | 1 | 2 | 1000;
        /**
         * Format: int32
         * @description [0: FollowSystem, 1: Light, 2: Dark]
         * @enum {integer}
         */
        "Bakabase.Infrastructures.Components.Gui.UiTheme": 0 | 1 | 2;
        "Bakabase.InsideWorld.Business.Components.Compression.CompressedFileEntry": {
            path: string;
            /** Format: int64 */
            size: number;
            /** Format: double */
            readonly sizeInMb: number;
        };
        "Bakabase.InsideWorld.Business.Components.Dependency.Abstractions.DependentComponentVersion": {
            version: string;
            description?: string;
            canUpdate: boolean;
        };
        "Bakabase.InsideWorld.Business.Components.FileExplorer.Entries.IwFsCompressedFileGroup": {
            keyName: string;
            files: string[];
            extension: string;
            readonly missEntry: boolean;
            password?: string;
            passwordCandidates: string[];
        };
        "Bakabase.InsideWorld.Business.Components.FileExplorer.Information.IwFsEntryLazyInfo": {
            /** Format: int32 */
            childrenCount: number;
        };
        "Bakabase.InsideWorld.Business.Components.FileExplorer.Information.IwFsTaskInfo": {
            path: string;
            type: components["schemas"]["Bakabase.InsideWorld.Business.Components.FileExplorer.IwFsEntryTaskType"];
            /** Format: int32 */
            percentage: number;
            error: string;
            backgroundTaskId: string;
            name: string;
        };
        /**
         * Format: int32
         * @description [1: Hidden]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Business.Components.FileExplorer.IwFsAttribute": 1;
        "Bakabase.InsideWorld.Business.Components.FileExplorer.IwFsEntry": {
            path: string;
            name: string;
            meaningfulName: string;
            ext: string;
            attributes: components["schemas"]["Bakabase.InsideWorld.Business.Components.FileExplorer.IwFsAttribute"][];
            type: components["schemas"]["Bakabase.InsideWorld.Business.Components.FileExplorer.IwFsType"];
            /** Format: int64 */
            size?: number;
            /** Format: int32 */
            childrenCount?: number;
            /** Format: date-time */
            creationTime?: string;
            /** Format: date-time */
            lastWriteTime?: string;
            passwordsForDecompressing: string[];
        };
        /**
         * Format: int32
         * @description [1: Decompressing, 2: Moving]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Business.Components.FileExplorer.IwFsEntryTaskType": 1 | 2;
        "Bakabase.InsideWorld.Business.Components.FileExplorer.IwFsPreview": {
            entries: components["schemas"]["Bakabase.InsideWorld.Business.Components.FileExplorer.IwFsEntry"][];
            directoryChain: components["schemas"]["Bakabase.InsideWorld.Business.Components.FileExplorer.IwFsEntry"][];
            compressedFileGroups: components["schemas"]["Bakabase.InsideWorld.Business.Components.FileExplorer.Entries.IwFsCompressedFileGroup"][];
        };
        /**
         * Format: int32
         * @description [0: Unknown, 100: Directory, 200: Image, 300: CompressedFileEntry, 400: CompressedFilePart, 500: Symlink, 600: Video, 700: Audio, 1000: Drive, 10000: Invalid]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Business.Components.FileExplorer.IwFsType": 0 | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 1000 | 10000;
        "Bakabase.InsideWorld.Business.Components.Tasks.BackgroundTaskDto": {
            id: string;
            name: string;
            /** Format: date-time */
            startDt: string;
            status: components["schemas"]["Bakabase.InsideWorld.Models.Constants.BackgroundTaskStatus"];
            message: string;
            /** Format: int32 */
            percentage: number;
            currentProcess: string;
            level: components["schemas"]["Bakabase.InsideWorld.Business.Components.Tasks.BackgroundTaskLevel"];
        };
        /**
         * Format: int32
         * @description [1: Default, 2: Critical]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Business.Components.Tasks.BackgroundTaskLevel": 1 | 2;
        "Bakabase.InsideWorld.Business.Configurations.Models.Domain.ResourceOptions": {
            /** Format: date-time */
            lastSyncDt: string;
            /** Format: date-time */
            lastNfoGenerationDt: string;
            lastSearchV2?: components["schemas"]["Bakabase.Modules.Search.Models.Db.ResourceSearchDbModel"];
            coverOptions: components["schemas"]["Bakabase.InsideWorld.Business.Configurations.Models.Domain.ResourceOptions+CoverOptionsModel"];
            hideChildren: boolean;
            propertyValueScopePriority: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyValueScope"][];
            additionalCoverDiscoveringSources: components["schemas"]["Bakabase.InsideWorld.Models.Constants.AdditionalCoverDiscoveringSource"][];
            savedSearches: components["schemas"]["Bakabase.InsideWorld.Business.Configurations.Models.Domain.ResourceOptions+SavedSearch"][];
            idsOfMediaLibraryRecentlyMovedTo?: number[];
        };
        "Bakabase.InsideWorld.Business.Configurations.Models.Domain.ResourceOptions+CoverOptionsModel": {
            saveMode?: components["schemas"]["Bakabase.InsideWorld.Models.Constants.CoverSaveMode"];
        };
        "Bakabase.InsideWorld.Business.Configurations.Models.Domain.ResourceOptions+SavedSearch": {
            search: components["schemas"]["Bakabase.Modules.Search.Models.Db.ResourceSearchDbModel"];
            name: string;
        };
        "Bakabase.InsideWorld.Models.Configs.BilibiliOptions": {
            downloader?: components["schemas"]["Bakabase.InsideWorld.Models.Configs.Infrastructures.CommonDownloaderOptions"];
            cookie?: string;
        };
        "Bakabase.InsideWorld.Models.Configs.EnhancerOptions": {
            regexEnhancer?: components["schemas"]["Bakabase.InsideWorld.Models.Configs.EnhancerOptions+RegexEnhancerModel"];
        };
        "Bakabase.InsideWorld.Models.Configs.EnhancerOptions+RegexEnhancerModel": {
            expressions?: string[];
        };
        "Bakabase.InsideWorld.Models.Configs.ExHentaiOptions": {
            downloader?: components["schemas"]["Bakabase.InsideWorld.Models.Configs.Infrastructures.CommonDownloaderOptions"];
            cookie?: string;
            enhancer?: components["schemas"]["Bakabase.InsideWorld.Models.Configs.ExHentaiOptions+ExHentaiEnhancerOptions"];
        };
        "Bakabase.InsideWorld.Models.Configs.ExHentaiOptions+ExHentaiEnhancerOptions": {
            excludedTags: string[];
        };
        "Bakabase.InsideWorld.Models.Configs.FileSystemOptions": {
            recentMovingDestinations?: string[];
            fileMover?: components["schemas"]["Bakabase.InsideWorld.Models.Configs.FileSystemOptions+FileMoverOptions"];
            fileProcessor?: components["schemas"]["Bakabase.InsideWorld.Models.Configs.FileSystemOptions+FileProcessorOptions"];
        };
        "Bakabase.InsideWorld.Models.Configs.FileSystemOptions+FileMoverOptions": {
            targets?: components["schemas"]["Bakabase.InsideWorld.Models.Configs.FileSystemOptions+FileMoverOptions+Target"][];
            enabled: boolean;
            /** Format: date-span */
            delay: string;
        };
        "Bakabase.InsideWorld.Models.Configs.FileSystemOptions+FileMoverOptions+Target": {
            path: string;
            sources: string[];
        };
        "Bakabase.InsideWorld.Models.Configs.FileSystemOptions+FileProcessorOptions": {
            workingDirectory: string;
        };
        "Bakabase.InsideWorld.Models.Configs.Infrastructures.CommonDownloaderOptions": {
            /** Format: int32 */
            threads: number;
            /** Format: int32 */
            interval: number;
            defaultPath?: string;
            namingConvention?: string;
        };
        "Bakabase.InsideWorld.Models.Configs.JavLibraryOptions": {
            cookie?: string;
            collector?: components["schemas"]["Bakabase.InsideWorld.Models.Configs.JavLibraryOptions+CollectorOptions"];
        };
        "Bakabase.InsideWorld.Models.Configs.JavLibraryOptions+CollectorOptions": {
            path?: string;
            urls?: string[];
            torrentOrLinkKeywords?: string[];
        };
        "Bakabase.InsideWorld.Models.Configs.NetworkOptions": {
            customProxies?: components["schemas"]["Bakabase.InsideWorld.Models.Configs.NetworkOptions+ProxyOptions"][];
            proxy: components["schemas"]["Bakabase.InsideWorld.Models.Configs.NetworkOptions+ProxyModel"];
        };
        /**
         * Format: int32
         * @description [0: DoNotUse, 1: UseSystem, 2: UseCustom]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Models.Configs.NetworkOptions+ProxyMode": 0 | 1 | 2;
        "Bakabase.InsideWorld.Models.Configs.NetworkOptions+ProxyModel": {
            mode: components["schemas"]["Bakabase.InsideWorld.Models.Configs.NetworkOptions+ProxyMode"];
            customProxyId?: string;
        };
        "Bakabase.InsideWorld.Models.Configs.NetworkOptions+ProxyOptions": {
            id: string;
            address: string;
            credentials?: components["schemas"]["Bakabase.InsideWorld.Models.Configs.NetworkOptions+ProxyOptions+ProxyCredentials"];
        };
        "Bakabase.InsideWorld.Models.Configs.NetworkOptions+ProxyOptions+ProxyCredentials": {
            username: string;
            password?: string;
            domain?: string;
        };
        "Bakabase.InsideWorld.Models.Configs.PixivOptions": {
            cookie?: string;
            downloader?: components["schemas"]["Bakabase.InsideWorld.Models.Configs.Infrastructures.CommonDownloaderOptions"];
        };
        "Bakabase.InsideWorld.Models.Configs.ThirdPartyOptions": {
            simpleSearchEngines?: components["schemas"]["Bakabase.InsideWorld.Models.Configs.ThirdPartyOptions+SimpleSearchEngineOptions"][];
        };
        "Bakabase.InsideWorld.Models.Configs.ThirdPartyOptions+SimpleSearchEngineOptions": {
            name: string;
            urlTemplate: string;
        };
        "Bakabase.InsideWorld.Models.Configs.UIOptions": {
            resource: components["schemas"]["Bakabase.InsideWorld.Models.Configs.UIOptions+UIResourceOptions"];
            startupPage: components["schemas"]["Bakabase.InsideWorld.Models.Constants.StartupPage"];
        };
        "Bakabase.InsideWorld.Models.Configs.UIOptions+UIResourceOptions": {
            /** Format: int32 */
            colCount: number;
            showBiggerCoverWhileHover: boolean;
            disableMediaPreviewer: boolean;
            disableCache: boolean;
            coverFit: components["schemas"]["Bakabase.InsideWorld.Models.Constants.CoverFit"];
            displayContents: components["schemas"]["Bakabase.InsideWorld.Models.Constants.ResourceDisplayContent"];
            disableCoverCarousel: boolean;
        };
        /**
         * Format: int32
         * @description [1: CompressedFile, 2: Video]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Models.Constants.AdditionalCoverDiscoveringSource": 1 | 2;
        /**
         * Format: int32
         * @description [0: None, 1: Components, 3: Validation, 4: CustomProperties, 8: EnhancerOptions]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Models.Constants.AdditionalItems.CategoryAdditionalItem": 0 | 1 | 3 | 4 | 8;
        /**
         * Format: int32
         * @description [0: None, 1: AssociatedCategories]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Models.Constants.AdditionalItems.ComponentDescriptorAdditionalItem": 0 | 1;
        /**
         * Format: int32
         * @description [0: None, 1: Category, 2: ValueCount]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Models.Constants.AdditionalItems.CustomPropertyAdditionalItem": 0 | 1 | 2;
        /**
         * Format: int32
         * @description [0: None, 1: Category, 2: FileSystemInfo, 4: PathConfigurationBoundProperties]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Models.Constants.AdditionalItems.MediaLibraryAdditionalItem": 0 | 1 | 2 | 4;
        /**
         * Format: int32
         * @description [0: None, 64: Alias, 128: Category, 160: CustomProperties, 416: DisplayName, 512: HasChildren, 1024: ReservedProperties, 2048: MediaLibraryName, 4096: Cache, 8160: All]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Models.Constants.AdditionalItems.ResourceAdditionalItem": 0 | 64 | 128 | 160 | 416 | 512 | 1024 | 2048 | 4096 | 8160;
        /**
         * Format: int32
         * @description [1: Latest, 2: Frequency]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Models.Constants.Aos.PasswordSearchOrder": 1 | 2;
        /**
         * Format: int32
         * @description [1: FileCreateDt, 2: FileModifyDt, 3: Filename, 6: AddDt]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Models.Constants.Aos.ResourceSearchSortableProperty": 1 | 2 | 3 | 6;
        /**
         * Format: int32
         * @description [1: Running, 2: Complete, 3: Failed]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Models.Constants.BackgroundTaskStatus": 1 | 2 | 3;
        /**
         * Format: int32
         * @description [0: Invalid, 1: Fixed, 2: Configurable, 3: Instance]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Models.Constants.ComponentDescriptorType": 0 | 1 | 2 | 3;
        /**
         * Format: int32
         * @description [1: Enhancer, 2: PlayableFileSelector, 3: Player]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Models.Constants.ComponentType": 1 | 2 | 3;
        /**
         * Format: int32
         * @description [1: BiliBili, 2: ExHentai, 3: Pixiv]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Models.Constants.CookieValidatorTarget": 1 | 2 | 3;
        /**
         * Format: int32
         * @description [1: Contain, 2: Cover]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Models.Constants.CoverFit": 1 | 2;
        /**
         * Format: int32
         * @description [1: Replace, 2: Prepend]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Models.Constants.CoverSaveMode": 1 | 2;
        /**
         * Format: int32
         * @description [1: FilenameAscending, 2: FileModifyDtDescending]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Models.Constants.CoverSelectOrder": 1 | 2;
        /**
         * Format: int32
         * @description [1: StartManually, 2: Restart, 3: Disable, 4: StartAutomatically]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Models.Constants.DownloadTaskAction": 1 | 2 | 3 | 4;
        /**
         * Format: int32
         * @description [0: NotSet, 1: StopOthers, 2: Ignore]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Models.Constants.DownloadTaskActionOnConflict": 0 | 1 | 2;
        /**
         * Format: int32
         * @description [100: Idle, 200: InQueue, 300: Starting, 400: Downloading, 500: Stopping, 600: Complete, 700: Failed, 800: Disabled]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Models.Constants.DownloadTaskDtoStatus": 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800;
        /**
         * Format: int32
         * @description [100: InProgress, 200: Disabled, 300: Complete, 400: Failed]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Models.Constants.DownloadTaskStatus": 100 | 200 | 300 | 400;
        /**
         * Format: int32
         * @description [1: InvalidVolume, 2: FreeSpaceNotEnough, 3: Occupied]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Models.Constants.MediaLibraryFileSystemError": 1 | 2 | 3;
        /**
         * Format: int32
         * @description [1: Image, 2: Audio, 3: Video, 4: Text, 1000: Unknown]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Models.Constants.MediaType": 1 | 2 | 3 | 4 | 1000;
        /**
         * Format: int32
         * @description [1: Resource, 2: Video, 3: Image, 4: Audio]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Models.Constants.PlaylistItemType": 1 | 2 | 3 | 4;
        /**
         * Format: int32
         * @description [1: MediaLibrary, 2: Category, 4: Tags, 7: All]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Models.Constants.ResourceDisplayContent": 1 | 2 | 4 | 7;
        /**
         * Format: int32
         * @description [1: Layer, 2: Regex, 3: FixedText]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Models.Constants.ResourceMatcherValueType": 1 | 2 | 3;
        /**
         * Format: int32
         * @description [0: Default, 1: Resource]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Models.Constants.StartupPage": 0 | 1;
        /**
         * Format: int32
         * @description [1: Bilibili, 2: ExHentai, 3: Pixiv, 4: Bangumi]
         * @enum {integer}
         */
        "Bakabase.InsideWorld.Models.Constants.ThirdPartyId": 1 | 2 | 3 | 4;
        "Bakabase.InsideWorld.Models.Models.Aos.DownloaderNamingDefinitions": {
            fields: components["schemas"]["Bakabase.InsideWorld.Models.Models.Aos.DownloaderNamingDefinitions+Field"][];
            defaultConvention: string;
        };
        "Bakabase.InsideWorld.Models.Models.Aos.DownloaderNamingDefinitions+Field": {
            key: string;
            description: string;
            example: string;
        };
        "Bakabase.InsideWorld.Models.Models.Aos.MediaLibraryFileSystemInformation": {
            /** Format: int64 */
            totalSize: number;
            /** Format: int64 */
            freeSpace: number;
            /** Format: double */
            readonly usedPercentage: number;
            /** Format: double */
            readonly freePercentage: number;
            /** Format: double */
            readonly freeSpaceInGb: number;
            error: components["schemas"]["Bakabase.InsideWorld.Models.Constants.MediaLibraryFileSystemError"];
        };
        "Bakabase.InsideWorld.Models.Models.Aos.PreviewerItem": {
            filePath: string;
            type: components["schemas"]["Bakabase.InsideWorld.Models.Constants.MediaType"];
            /** Format: int32 */
            duration: number;
        };
        "Bakabase.InsideWorld.Models.Models.Aos.ThirdPartyRequestStatistics": {
            id: components["schemas"]["Bakabase.InsideWorld.Models.Constants.ThirdPartyId"];
            counts: {
                [key: string]: number;
            };
        };
        "Bakabase.InsideWorld.Models.Models.Dtos.DashboardStatistics": {
            categoryResourceCounts: components["schemas"]["Bakabase.InsideWorld.Models.Models.Dtos.DashboardStatistics+TextAndCount"][];
            todayAddedCategoryResourceCounts: components["schemas"]["Bakabase.InsideWorld.Models.Models.Dtos.DashboardStatistics+TextAndCount"][];
            thisWeekAddedCategoryResourceCounts: components["schemas"]["Bakabase.InsideWorld.Models.Models.Dtos.DashboardStatistics+TextAndCount"][];
            thisMonthAddedCategoryResourceCounts: components["schemas"]["Bakabase.InsideWorld.Models.Models.Dtos.DashboardStatistics+TextAndCount"][];
            resourceTrending: components["schemas"]["Bakabase.InsideWorld.Models.Models.Dtos.DashboardStatistics+WeekCount"][];
            propertyValueCounts: components["schemas"]["Bakabase.InsideWorld.Models.Models.Dtos.DashboardStatistics+PropertyAndCount"][];
            tagResourceCounts: components["schemas"]["Bakabase.InsideWorld.Models.Models.Dtos.DashboardStatistics+TextAndCount"][];
            downloaderDataCounts: components["schemas"]["Bakabase.InsideWorld.Models.Models.Dtos.DashboardStatistics+DownloaderTaskCount"][];
            thirdPartyRequestCounts: components["schemas"]["Bakabase.InsideWorld.Models.Models.Dtos.DashboardStatistics+ThirdPartyRequestCount"][];
            fileMover: components["schemas"]["Bakabase.InsideWorld.Models.Models.Dtos.DashboardStatistics+FileMoverInfo"];
            otherCounts: components["schemas"]["Bakabase.InsideWorld.Models.Models.Dtos.DashboardStatistics+TextAndCount"][][];
        };
        "Bakabase.InsideWorld.Models.Models.Dtos.DashboardStatistics+DownloaderTaskCount": {
            id: components["schemas"]["Bakabase.InsideWorld.Models.Constants.ThirdPartyId"];
            statusAndCounts: {
                [key: string]: number;
            };
        };
        "Bakabase.InsideWorld.Models.Models.Dtos.DashboardStatistics+FileMoverInfo": {
            /** Format: int32 */
            sourceCount: number;
            /** Format: int32 */
            targetCount: number;
        };
        "Bakabase.InsideWorld.Models.Models.Dtos.DashboardStatistics+PropertyAndCount": {
            name: string;
            /** Format: int32 */
            valueCount: number;
        };
        "Bakabase.InsideWorld.Models.Models.Dtos.DashboardStatistics+TextAndCount": {
            label?: string;
            name: string;
            /** Format: int32 */
            count: number;
        };
        "Bakabase.InsideWorld.Models.Models.Dtos.DashboardStatistics+ThirdPartyRequestCount": {
            id: components["schemas"]["Bakabase.InsideWorld.Models.Constants.ThirdPartyId"];
            /** Format: int32 */
            resultType: number;
            /** Format: int32 */
            taskCount: number;
        };
        "Bakabase.InsideWorld.Models.Models.Dtos.DashboardStatistics+WeekCount": {
            /** Format: int32 */
            offset: number;
            /** Format: int32 */
            count: number;
        };
        "Bakabase.InsideWorld.Models.Models.Dtos.DownloadTaskDto": {
            /** Format: int32 */
            id: number;
            key: string;
            name: string;
            thirdPartyId: components["schemas"]["Bakabase.InsideWorld.Models.Constants.ThirdPartyId"];
            /** Format: int32 */
            type: number;
            /** Format: double */
            progress: number;
            /** Format: date-time */
            downloadStatusUpdateDt: string;
            /** Format: int64 */
            interval?: number;
            /** Format: int32 */
            startPage?: number;
            /** Format: int32 */
            endPage?: number;
            message: string;
            checkpoint: string;
            status: components["schemas"]["Bakabase.InsideWorld.Models.Constants.DownloadTaskDtoStatus"];
            downloadPath: string;
            current: string;
            /** Format: int32 */
            failureTimes: number;
            /** Format: date-time */
            nextStartDt?: string;
            availableActions: components["schemas"]["Bakabase.InsideWorld.Models.Constants.DownloadTaskAction"][];
            readonly displayName: string;
            readonly canStart: boolean;
        };
        "Bakabase.InsideWorld.Models.Models.Dtos.PlaylistDto": {
            /** Format: int32 */
            id: number;
            name: string;
            items?: components["schemas"]["Bakabase.InsideWorld.Models.Models.Dtos.PlaylistItemDto"][];
            /** Format: int32 */
            interval: number;
            /** Format: int32 */
            order: number;
        };
        "Bakabase.InsideWorld.Models.Models.Dtos.PlaylistItemDto": {
            type: components["schemas"]["Bakabase.InsideWorld.Models.Constants.PlaylistItemType"];
            /** Format: int32 */
            resourceId?: number;
            file?: string;
            /** Format: date-span */
            startTime?: string;
            /** Format: date-span */
            endTime?: string;
        };
        "Bakabase.InsideWorld.Models.Models.Dtos.ResourceCategoryEnhancementOptions": {
            enhancementPriorities: {
                [key: string]: string[];
            };
            defaultPriority: string[];
        };
        "Bakabase.InsideWorld.Models.Models.Entities.ComponentOptions": {
            /** Format: int32 */
            id: number;
            componentType: components["schemas"]["Bakabase.InsideWorld.Models.Constants.ComponentType"];
            componentAssemblyQualifiedTypeName: string;
            name: string;
            description?: string;
            json: string;
        };
        "Bakabase.InsideWorld.Models.Models.Entities.DownloadTask": {
            /** Format: int32 */
            id: number;
            key: string;
            name?: string;
            thirdPartyId: components["schemas"]["Bakabase.InsideWorld.Models.Constants.ThirdPartyId"];
            /** Format: int32 */
            type: number;
            /** Format: double */
            progress: number;
            /** Format: date-time */
            downloadStatusUpdateDt: string;
            /** Format: int64 */
            interval?: number;
            /** Format: int32 */
            startPage?: number;
            /** Format: int32 */
            endPage?: number;
            message?: string;
            checkpoint?: string;
            status: components["schemas"]["Bakabase.InsideWorld.Models.Constants.DownloadTaskStatus"];
            downloadPath: string;
            readonly displayName: string;
        };
        "Bakabase.InsideWorld.Models.Models.Entities.Password": {
            text: string;
            /** Format: int32 */
            usedTimes: number;
            /** Format: date-time */
            lastUsedAt: string;
        };
        "Bakabase.InsideWorld.Models.RequestModels.ComponentOptionsAddRequestModel": {
            name: string;
            description?: string;
            componentAssemblyQualifiedTypeName: string;
            json: string;
        };
        "Bakabase.InsideWorld.Models.RequestModels.DownloadTaskCreateRequestModel": {
            thirdPartyId: components["schemas"]["Bakabase.InsideWorld.Models.Constants.ThirdPartyId"];
            /** Format: int32 */
            type: number;
            keyAndNames?: {
                [key: string]: string;
            };
            /** Format: int64 */
            interval?: number;
            /** Format: int32 */
            startPage?: number;
            /** Format: int32 */
            endPage?: number;
            checkpoint?: string;
            forceCreating: boolean;
            downloadPath: string;
        };
        "Bakabase.InsideWorld.Models.RequestModels.DownloadTaskStartRequestModel": {
            ids: number[];
            actionOnConflict: components["schemas"]["Bakabase.InsideWorld.Models.Constants.DownloadTaskActionOnConflict"];
        };
        "Bakabase.InsideWorld.Models.RequestModels.FileDecompressRequestModel": {
            paths: string[];
            password?: string;
        };
        "Bakabase.InsideWorld.Models.RequestModels.FileMoveRequestModel": {
            destDir: string;
            entryPaths: string[];
        };
        "Bakabase.InsideWorld.Models.RequestModels.FileRemoveRequestModel": {
            paths: string[];
        };
        "Bakabase.InsideWorld.Models.RequestModels.FileRenameRequestModel": {
            fullname: string;
            newName: string;
        };
        "Bakabase.InsideWorld.Models.RequestModels.IdBasedSortRequestModel": {
            ids: number[];
        };
        "Bakabase.InsideWorld.Models.RequestModels.Options.NetworkOptionsPatchInputModel": {
            customProxies?: components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.Options.NetworkOptionsPatchInputModel+ProxyOptions"][];
            proxy?: components["schemas"]["Bakabase.InsideWorld.Models.Configs.NetworkOptions+ProxyModel"];
        };
        "Bakabase.InsideWorld.Models.RequestModels.Options.NetworkOptionsPatchInputModel+ProxyOptions": {
            id?: string;
            address: string;
            credentials?: components["schemas"]["Bakabase.InsideWorld.Models.Configs.NetworkOptions+ProxyOptions+ProxyCredentials"];
        };
        "Bakabase.InsideWorld.Models.RequestModels.PathConfigurationRemoveRequestModel": {
            /** Format: int32 */
            index: number;
        };
        "Bakabase.InsideWorld.Models.RequestModels.RemoveSameEntryInWorkingDirectoryRequestModel": {
            workingDir: string;
            entryPaths: string[];
        };
        "Bakabase.InsideWorld.Models.RequestModels.ResourceMoveRequestModel": {
            ids: number[];
            /** Format: int32 */
            mediaLibraryId: number;
            path?: string;
        };
        "Bakabase.InsideWorld.Models.RequestModels.UIOptionsPatchRequestModel": {
            resource?: components["schemas"]["Bakabase.InsideWorld.Models.Configs.UIOptions+UIResourceOptions"];
            startupPage?: components["schemas"]["Bakabase.InsideWorld.Models.Constants.StartupPage"];
        };
        "Bakabase.Modules.Alias.Abstractions.Models.Domain.Alias": {
            text: string;
            preferred?: string;
            candidates?: string[];
        };
        "Bakabase.Modules.Alias.Models.Input.AliasAddInputModel": {
            text: string;
            preferred?: string;
        };
        "Bakabase.Modules.Alias.Models.Input.AliasPatchInputModel": {
            text?: string;
            isPreferred: boolean;
        };
        "Bakabase.Modules.Enhancer.Abstractions.Components.IEnhancementConverter": Record<string, never>;
        "Bakabase.Modules.Enhancer.Abstractions.Components.IEnhancerDescriptor": {
            /** Format: int32 */
            readonly id: number;
            readonly name: string;
            readonly description?: string;
            readonly targets: components["schemas"]["Bakabase.Modules.Enhancer.Abstractions.Components.IEnhancerTargetDescriptor"][];
            /** Format: int32 */
            readonly propertyValueScope: number;
        };
        "Bakabase.Modules.Enhancer.Abstractions.Components.IEnhancerTargetDescriptor": {
            /** Format: int32 */
            readonly id: number;
            readonly name: string;
            enumId: components["schemas"]["System.Enum"];
            valueType: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.StandardValueType"];
            propertyType: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyType"];
            readonly isDynamic: boolean;
            readonly description?: string;
            readonly optionsItems?: number[];
            enhancementConverter?: components["schemas"]["Bakabase.Modules.Enhancer.Abstractions.Components.IEnhancementConverter"];
            reservedPropertyCandidate?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.ReservedProperty"];
        };
        /**
         * Format: int32
         * @description [0: None, 1: GeneratedPropertyValue]
         * @enum {integer}
         */
        "Bakabase.Modules.Enhancer.Abstractions.Models.Domain.Constants.EnhancementAdditionalItem": 0 | 1;
        "Bakabase.Modules.Enhancer.Abstractions.Models.Domain.EnhancerFullOptions": {
            targetOptions?: components["schemas"]["Bakabase.Modules.Enhancer.Abstractions.Models.Domain.EnhancerTargetFullOptions"][];
        };
        "Bakabase.Modules.Enhancer.Abstractions.Models.Domain.EnhancerTargetFullOptions": {
            /** Format: int32 */
            target: number;
            dynamicTarget?: string;
            autoMatchMultilevelString?: boolean;
            autoBindProperty?: boolean;
            /** Format: int32 */
            propertyId?: number;
            propertyPool?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyPool"];
            coverSelectOrder?: components["schemas"]["Bakabase.InsideWorld.Models.Constants.CoverSelectOrder"];
        };
        "Bakabase.Modules.Enhancer.Models.Input.CategoryEnhancerOptionsPatchInputModel": {
            options?: components["schemas"]["Bakabase.Modules.Enhancer.Abstractions.Models.Domain.EnhancerFullOptions"];
            active?: boolean;
        };
        "Bakabase.Modules.Enhancer.Models.Input.CategoryEnhancerTargetOptionsPatchInputModel": {
            autoMatchMultilevelString?: boolean;
            autoBindProperty?: boolean;
            coverSelectOrder?: components["schemas"]["Bakabase.InsideWorld.Models.Constants.CoverSelectOrder"];
            /** Format: int32 */
            propertyId?: number;
            propertyPool?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyPool"];
            dynamicTarget?: string;
        };
        "Bakabase.Modules.Property.Models.View.CustomPropertyTypeConversionExampleViewModel": {
            results?: components["schemas"]["Bakabase.Modules.Property.Models.View.CustomPropertyTypeConversionExampleViewModel+Tin"][];
        };
        "Bakabase.Modules.Property.Models.View.CustomPropertyTypeConversionExampleViewModel+Tin": {
            type: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyType"];
            bizValueType: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.StandardValueType"];
            serializedBizValue?: string;
            outputs?: components["schemas"]["Bakabase.Modules.Property.Models.View.CustomPropertyTypeConversionExampleViewModel+Tout"][];
        };
        "Bakabase.Modules.Property.Models.View.CustomPropertyTypeConversionExampleViewModel+Tout": {
            type: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyType"];
            bizValueType: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.StandardValueType"];
            serializedBizValue?: string;
        };
        "Bakabase.Modules.Property.Models.View.CustomPropertyTypeConversionPreviewViewModel": {
            /** Format: int32 */
            dataCount: number;
            changes: components["schemas"]["Bakabase.Modules.Property.Models.View.CustomPropertyTypeConversionPreviewViewModel+Change"][];
            fromType: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.StandardValueType"];
            toType: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.StandardValueType"];
        };
        "Bakabase.Modules.Property.Models.View.CustomPropertyTypeConversionPreviewViewModel+Change": {
            serializedFromValue?: string;
            serializedToValue?: string;
        };
        "Bakabase.Modules.Property.Models.View.PropertyViewModel": {
            pool: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyPool"];
            /** Format: int32 */
            id: number;
            name: string;
            type: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyType"];
            options?: unknown;
            dbValueType: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.StandardValueType"];
            bizValueType: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.StandardValueType"];
            poolName: string;
            typeName: string;
        };
        "Bakabase.Modules.Search.Models.Db.ResourceSearchDbModel": {
            group?: components["schemas"]["Bakabase.Modules.Search.Models.Db.ResourceSearchFilterGroupDbModel"];
            orders?: components["schemas"]["Bakabase.Abstractions.Models.Input.ResourceSearchOrderInputModel"][];
            keyword?: string;
            /** Format: int32 */
            page: number;
            /** Format: int32 */
            pageSize: number;
            tags?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.ResourceTag"][];
        };
        "Bakabase.Modules.Search.Models.Db.ResourceSearchFilterDbModel": {
            propertyPool?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyPool"];
            /** Format: int32 */
            propertyId?: number;
            operation?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.SearchOperation"];
            value?: string;
            disabled: boolean;
        };
        "Bakabase.Modules.Search.Models.Db.ResourceSearchFilterGroupDbModel": {
            combinator: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.SearchCombinator"];
            groups?: components["schemas"]["Bakabase.Modules.Search.Models.Db.ResourceSearchFilterGroupDbModel"][];
            filters?: components["schemas"]["Bakabase.Modules.Search.Models.Db.ResourceSearchFilterDbModel"][];
            disabled: boolean;
        };
        /**
         * Format: int32
         * @description [1: Directly, 2: Incompatible, 4: ValuesWillBeMerged, 8: DateWillBeLost, 16: StringToTag, 64: OnlyFirstValidRemains, 128: StringToDateTime, 256: StringToTime, 1024: UrlWillBeLost, 2048: StringToNumber, 8192: Trim, 16384: StringToLink, 32768: ValueWillBeSplit, 65536: BooleanToNumber, 131072: TimeToDateTime, 262144: TagGroupWillBeLost, 524288: ValueToBoolean]
         * @enum {integer}
         */
        "Bakabase.Modules.StandardValue.Abstractions.Models.Domain.Constants.StandardValueConversionRule": 1 | 2 | 4 | 8 | 16 | 64 | 128 | 256 | 1024 | 2048 | 8192 | 16384 | 32768 | 65536 | 131072 | 262144 | 524288;
        "Bakabase.Modules.StandardValue.Models.View.StandardValueConversionRuleViewModel": {
            rule: components["schemas"]["Bakabase.Modules.StandardValue.Abstractions.Models.Domain.Constants.StandardValueConversionRule"];
            name: string;
            description?: string;
        };
        "Bakabase.Modules.ThirdParty.ThirdParties.Bilibili.Models.Favorites": {
            /** Format: int64 */
            id: number;
            title: string;
            /** Format: int32 */
            mediaCount: number;
        };
        "Bakabase.Service.Models.Input.BulkModificationPatchInputModel": {
            name?: string;
            isActive?: boolean;
            variables?: components["schemas"]["Bakabase.Service.Models.Input.BulkModificationVariableInputModel"][];
            filter?: components["schemas"]["Bakabase.Service.Models.Input.ResourceSearchFilterGroupInputModel"];
            processes?: components["schemas"]["Bakabase.Service.Models.Input.BulkModificationProcessInputModel"][];
        };
        "Bakabase.Service.Models.Input.BulkModificationProcessInputModel": {
            propertyPool: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyPool"];
            /** Format: int32 */
            propertyId: number;
            steps?: string;
        };
        "Bakabase.Service.Models.Input.BulkModificationVariableInputModel": {
            key?: string;
            scope: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyValueScope"];
            propertyPool: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyPool"];
            /** Format: int32 */
            propertyId: number;
            name: string;
            preprocesses?: string;
        };
        "Bakabase.Service.Models.Input.FileSystemEntryGroupInputModel": {
            paths: string[];
            groupInternal: boolean;
        };
        "Bakabase.Service.Models.Input.ResourceCoverSaveInputModel": {
            base64String: string;
            saveMode: components["schemas"]["Bakabase.InsideWorld.Models.Constants.CoverSaveMode"];
        };
        "Bakabase.Service.Models.Input.ResourceOptionsPatchInputModel": {
            additionalCoverDiscoveringSources?: components["schemas"]["Bakabase.InsideWorld.Models.Constants.AdditionalCoverDiscoveringSource"][];
            coverOptions?: components["schemas"]["Bakabase.InsideWorld.Business.Configurations.Models.Domain.ResourceOptions+CoverOptionsModel"];
            propertyValueScopePriority?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyValueScope"][];
            searchCriteria?: components["schemas"]["Bakabase.Service.Models.Input.ResourceSearchInputModel"];
        };
        "Bakabase.Service.Models.Input.ResourceSearchFilterGroupInputModel": {
            combinator: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.SearchCombinator"];
            groups?: components["schemas"]["Bakabase.Service.Models.Input.ResourceSearchFilterGroupInputModel"][];
            filters?: components["schemas"]["Bakabase.Service.Models.Input.ResourceSearchFilterInputModel"][];
            disabled: boolean;
        };
        "Bakabase.Service.Models.Input.ResourceSearchFilterInputModel": {
            propertyPool?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyPool"];
            /** Format: int32 */
            propertyId?: number;
            operation?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.SearchOperation"];
            dbValue?: string;
            disabled: boolean;
        };
        "Bakabase.Service.Models.Input.ResourceSearchInputModel": {
            group?: components["schemas"]["Bakabase.Service.Models.Input.ResourceSearchFilterGroupInputModel"];
            orders?: components["schemas"]["Bakabase.Abstractions.Models.Input.ResourceSearchOrderInputModel"][];
            keyword?: string;
            /** Format: int32 */
            pageSize: number;
            /** Format: int32 */
            page: number;
            tags?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.ResourceTag"][];
        };
        "Bakabase.Service.Models.Input.SavedSearchAddInputModel": {
            search: components["schemas"]["Bakabase.Service.Models.Input.ResourceSearchInputModel"];
            name: string;
        };
        "Bakabase.Service.Models.View.BulkModificationDiffViewModel": {
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            bulkModificationId: number;
            resourcePath: string;
            /** Format: int32 */
            resourceId: number;
            diffs: components["schemas"]["Bakabase.Service.Models.View.ResourceDiffViewModel"][];
        };
        "Bakabase.Service.Models.View.BulkModificationProcessStepViewModel": {
            /** Format: int32 */
            operation: number;
            options?: unknown;
        };
        "Bakabase.Service.Models.View.BulkModificationProcessViewModel": {
            propertyPool: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyPool"];
            /** Format: int32 */
            propertyId: number;
            property: components["schemas"]["Bakabase.Modules.Property.Models.View.PropertyViewModel"];
            steps?: components["schemas"]["Bakabase.Service.Models.View.BulkModificationProcessStepViewModel"][];
        };
        "Bakabase.Service.Models.View.BulkModificationVariableViewModel": {
            scope: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyValueScope"];
            propertyPool: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyPool"];
            /** Format: int32 */
            propertyId: number;
            property: components["schemas"]["Bakabase.Modules.Property.Models.View.PropertyViewModel"];
            key: string;
            name: string;
            preprocesses?: components["schemas"]["Bakabase.Service.Models.View.BulkModificationProcessStepViewModel"][];
        };
        "Bakabase.Service.Models.View.BulkModificationViewModel": {
            /** Format: int32 */
            id: number;
            name: string;
            isActive: boolean;
            /** Format: date-time */
            createdAt: string;
            variables?: components["schemas"]["Bakabase.Service.Models.View.BulkModificationVariableViewModel"][];
            filter?: components["schemas"]["Bakabase.Service.Models.View.ResourceSearchFilterGroupViewModel"];
            processes?: components["schemas"]["Bakabase.Service.Models.View.BulkModificationProcessViewModel"][];
            filteredResourceIds?: number[];
            /** Format: date-time */
            appliedAt?: string;
            /** Format: int32 */
            resourceDiffCount: number;
        };
        "Bakabase.Service.Models.View.CategoryViewModel": {
            /** Format: int32 */
            id: number;
            name: string;
            color?: string;
            /** Format: date-time */
            createDt: string;
            /** Format: int32 */
            order: number;
            componentsData?: components["schemas"]["Bakabase.Abstractions.Models.Db.CategoryComponent"][];
            coverSelectionOrder: components["schemas"]["Bakabase.InsideWorld.Models.Constants.CoverSelectOrder"];
            generateNfo: boolean;
            resourceDisplayNameTemplate?: string;
            customProperties?: components["schemas"]["Bakabase.Service.Models.View.CategoryViewModel+CustomPropertyViewModel"][];
            enhancerOptions?: components["schemas"]["Bakabase.Abstractions.Models.Domain.CategoryEnhancerOptions"][];
        };
        "Bakabase.Service.Models.View.CategoryViewModel+CustomPropertyViewModel": {
            /** Format: int32 */
            id: number;
            name: string;
            type: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyType"];
        };
        "Bakabase.Service.Models.View.CustomPropertyViewModel": {
            pool: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyPool"];
            /** Format: int32 */
            id: number;
            name: string;
            type: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyType"];
            options?: unknown;
            dbValueType: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.StandardValueType"];
            bizValueType: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.StandardValueType"];
            poolName: string;
            typeName: string;
            /** Format: int32 */
            valueCount?: number;
            categories?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Category"][];
        };
        "Bakabase.Service.Models.View.EnhancementViewModel": {
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            resourceId: number;
            /** Format: int32 */
            enhancerId: number;
            valueType: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.StandardValueType"];
            /** Format: int32 */
            target: number;
            dynamicTarget?: string;
            value?: unknown;
            propertyPool?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyPool"];
            /** Format: int32 */
            propertyId?: number;
            customPropertyValue?: components["schemas"]["Bakabase.Abstractions.Models.Domain.CustomPropertyValue"];
            reservedPropertyValue?: components["schemas"]["Bakabase.Abstractions.Models.Domain.ReservedPropertyValue"];
            property?: components["schemas"]["Bakabase.Modules.Property.Models.View.PropertyViewModel"];
        };
        "Bakabase.Service.Models.View.FileSystemEntryGroupResultViewModel": {
            rootPath: string;
            groups: components["schemas"]["Bakabase.Service.Models.View.FileSystemEntryGroupResultViewModel+GroupViewModel"][];
        };
        "Bakabase.Service.Models.View.FileSystemEntryGroupResultViewModel+GroupViewModel": {
            directoryName: string;
            filenames: string[];
        };
        "Bakabase.Service.Models.View.FileSystemEntryNameViewModel": {
            name: string;
            isDirectory: boolean;
        };
        "Bakabase.Service.Models.View.PropertyTypeForManuallySettingValueViewModel": {
            type: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyType"];
            dbValueType: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.StandardValueType"];
            bizValueType: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.StandardValueType"];
            isReferenceValueType: boolean;
            properties?: components["schemas"]["Bakabase.Modules.Property.Models.View.PropertyViewModel"][];
            unavailableReason?: string;
            readonly isAvailable: boolean;
        };
        "Bakabase.Service.Models.View.ResourceDiffViewModel": {
            property: components["schemas"]["Bakabase.Modules.Property.Models.View.PropertyViewModel"];
            value1?: string;
            value2?: string;
        };
        "Bakabase.Service.Models.View.ResourceEnhancements": {
            enhancer: components["schemas"]["Bakabase.Modules.Enhancer.Abstractions.Components.IEnhancerDescriptor"];
            /** Format: date-time */
            contextCreatedAt?: string;
            /** Format: date-time */
            contextAppliedAt?: string;
            status: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.EnhancementRecordStatus"];
            targets: components["schemas"]["Bakabase.Service.Models.View.ResourceEnhancements+TargetEnhancement"][];
            dynamicTargets: components["schemas"]["Bakabase.Service.Models.View.ResourceEnhancements+DynamicTargetEnhancements"][];
        };
        "Bakabase.Service.Models.View.ResourceEnhancements+DynamicTargetEnhancements": {
            /** Format: int32 */
            target: number;
            targetName: string;
            enhancements?: components["schemas"]["Bakabase.Service.Models.View.EnhancementViewModel"][];
        };
        "Bakabase.Service.Models.View.ResourceEnhancements+TargetEnhancement": {
            /** Format: int32 */
            target: number;
            targetName: string;
            enhancement?: components["schemas"]["Bakabase.Service.Models.View.EnhancementViewModel"];
        };
        "Bakabase.Service.Models.View.ResourcePathInfoViewModel": {
            /** Format: int32 */
            id: number;
            path: string;
            fileName: string;
        };
        "Bakabase.Service.Models.View.ResourceSearchFilterGroupViewModel": {
            combinator: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.SearchCombinator"];
            groups?: components["schemas"]["Bakabase.Service.Models.View.ResourceSearchFilterGroupViewModel"][];
            filters?: components["schemas"]["Bakabase.Service.Models.View.ResourceSearchFilterViewModel"][];
            disabled: boolean;
        };
        "Bakabase.Service.Models.View.ResourceSearchFilterViewModel": {
            propertyPool?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyPool"];
            /** Format: int32 */
            propertyId?: number;
            operation?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.SearchOperation"];
            dbValue?: string;
            bizValue?: string;
            disabled: boolean;
            availableOperations?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.SearchOperation"][];
            property?: components["schemas"]["Bakabase.Modules.Property.Models.View.PropertyViewModel"];
            valueProperty?: components["schemas"]["Bakabase.Modules.Property.Models.View.PropertyViewModel"];
        };
        "Bakabase.Service.Models.View.ResourceSearchViewModel": {
            group?: components["schemas"]["Bakabase.Service.Models.View.ResourceSearchFilterGroupViewModel"];
            orders?: components["schemas"]["Bakabase.Abstractions.Models.Input.ResourceSearchOrderInputModel"][];
            keyword?: string;
            /** Format: int32 */
            page: number;
            /** Format: int32 */
            pageSize: number;
            tags?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.ResourceTag"][];
        };
        "Bakabase.Service.Models.View.SavedSearchViewModel": {
            search: components["schemas"]["Bakabase.Service.Models.View.ResourceSearchViewModel"];
            name: string;
        };
        "Bootstrap.Components.Logging.LogService.Models.Entities.Log": {
            /** Format: int32 */
            id: number;
            /** Format: date-time */
            dateTime: string;
            level: components["schemas"]["Microsoft.Extensions.Logging.LogLevel"];
            logger?: string;
            event?: string;
            message?: string;
            read: boolean;
        };
        "Bootstrap.Models.ResponseModels.BaseResponse": {
            /** Format: int32 */
            code: number;
            message?: string;
        };
        "Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Abstractions.Models.Domain.ComponentDescriptor]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Abstractions.Models.Domain.ComponentDescriptor"][];
        };
        "Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Abstractions.Models.Domain.Constants.SearchOperation]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.SearchOperation"][];
        };
        "Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Abstractions.Models.Domain.MediaLibrary]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Abstractions.Models.Domain.MediaLibrary"][];
        };
        "Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Abstractions.Models.Domain.Resource]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Resource"][];
        };
        "Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Abstractions.Models.View.CategoryResourceDisplayNameViewModel]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Abstractions.Models.View.CategoryResourceDisplayNameViewModel"][];
        };
        "Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.InsideWorld.Business.Components.Compression.CompressedFileEntry]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Business.Components.Compression.CompressedFileEntry"][];
        };
        "Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.InsideWorld.Business.Components.Tasks.BackgroundTaskDto]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Business.Components.Tasks.BackgroundTaskDto"][];
        };
        "Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.InsideWorld.Models.Models.Aos.PreviewerItem]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Models.Models.Aos.PreviewerItem"][];
        };
        "Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.InsideWorld.Models.Models.Dtos.DownloadTaskDto]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Models.Models.Dtos.DownloadTaskDto"][];
        };
        "Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.InsideWorld.Models.Models.Dtos.PlaylistDto]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Models.Models.Dtos.PlaylistDto"][];
        };
        "Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.InsideWorld.Models.Models.Entities.Password]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Models.Models.Entities.Password"][];
        };
        "Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Modules.Enhancer.Abstractions.Components.IEnhancerDescriptor]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Modules.Enhancer.Abstractions.Components.IEnhancerDescriptor"][];
        };
        "Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Modules.Property.Models.View.PropertyViewModel]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Modules.Property.Models.View.PropertyViewModel"][];
        };
        "Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Modules.ThirdParty.ThirdParties.Bilibili.Models.Favorites]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Modules.ThirdParty.ThirdParties.Bilibili.Models.Favorites"][];
        };
        "Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.BulkModificationViewModel]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Service.Models.View.BulkModificationViewModel"][];
        };
        "Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.CategoryViewModel]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Service.Models.View.CategoryViewModel"][];
        };
        "Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.CustomPropertyViewModel]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Service.Models.View.CustomPropertyViewModel"][];
        };
        "Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.FileSystemEntryNameViewModel]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Service.Models.View.FileSystemEntryNameViewModel"][];
        };
        "Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.PropertyTypeForManuallySettingValueViewModel]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Service.Models.View.PropertyTypeForManuallySettingValueViewModel"][];
        };
        "Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.ResourceEnhancements]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Service.Models.View.ResourceEnhancements"][];
        };
        "Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.ResourcePathInfoViewModel]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Service.Models.View.ResourcePathInfoViewModel"][];
        };
        "Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.SavedSearchViewModel]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Service.Models.View.SavedSearchViewModel"][];
        };
        "Bootstrap.Models.ResponseModels.ListResponse`1[Bootstrap.Components.Logging.LogService.Models.Entities.Log]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bootstrap.Components.Logging.LogService.Models.Entities.Log"][];
        };
        "Bootstrap.Models.ResponseModels.ListResponse`1[System.Collections.Generic.List`1[System.String]]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: string[][];
        };
        "Bootstrap.Models.ResponseModels.ListResponse`1[System.String]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: string[];
        };
        "Bootstrap.Models.ResponseModels.SearchResponse`1[Bakabase.Abstractions.Models.Domain.Resource]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Resource"][];
            /** Format: int32 */
            totalCount: number;
            /** Format: int32 */
            pageIndex: number;
            /** Format: int32 */
            pageSize: number;
        };
        "Bootstrap.Models.ResponseModels.SearchResponse`1[Bakabase.InsideWorld.Models.Models.Entities.Password]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Models.Models.Entities.Password"][];
            /** Format: int32 */
            totalCount: number;
            /** Format: int32 */
            pageIndex: number;
            /** Format: int32 */
            pageSize: number;
        };
        "Bootstrap.Models.ResponseModels.SearchResponse`1[Bakabase.Modules.Alias.Abstractions.Models.Domain.Alias]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Modules.Alias.Abstractions.Models.Domain.Alias"][];
            /** Format: int32 */
            totalCount: number;
            /** Format: int32 */
            pageIndex: number;
            /** Format: int32 */
            pageSize: number;
        };
        "Bootstrap.Models.ResponseModels.SearchResponse`1[Bakabase.Service.Models.View.BulkModificationDiffViewModel]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Service.Models.View.BulkModificationDiffViewModel"][];
            /** Format: int32 */
            totalCount: number;
            /** Format: int32 */
            pageIndex: number;
            /** Format: int32 */
            pageSize: number;
        };
        "Bootstrap.Models.ResponseModels.SearchResponse`1[Bootstrap.Components.Logging.LogService.Models.Entities.Log]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bootstrap.Components.Logging.LogService.Models.Entities.Log"][];
            /** Format: int32 */
            totalCount: number;
            /** Format: int32 */
            pageIndex: number;
            /** Format: int32 */
            pageSize: number;
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.Domain.CategoryEnhancerOptions]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Abstractions.Models.Domain.CategoryEnhancerOptions"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.Domain.ComponentDescriptor]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Abstractions.Models.Domain.ComponentDescriptor"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.Domain.Constants.InitializationContentType]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.InitializationContentType"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.Domain.MediaLibrary]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Abstractions.Models.Domain.MediaLibrary"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.Domain.PathConfigurationTestResult]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Abstractions.Models.Domain.PathConfigurationTestResult"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.Domain.SpecialText]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Abstractions.Models.Domain.SpecialText"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.View.CacheOverviewViewModel]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Abstractions.Models.View.CacheOverviewViewModel"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Infrastructures.Components.App.Models.ResponseModels.AppInfo]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Infrastructures.Components.App.Models.ResponseModels.AppInfo"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Infrastructures.Components.App.Upgrade.Abstractions.AppVersionInfo]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Infrastructures.Components.App.Upgrade.Abstractions.AppVersionInfo"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Infrastructures.Components.Configurations.App.AppOptions]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Infrastructures.Components.Configurations.App.AppOptions"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Components.Dependency.Abstractions.DependentComponentVersion]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Business.Components.Dependency.Abstractions.DependentComponentVersion"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Components.FileExplorer.Information.IwFsEntryLazyInfo]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Business.Components.FileExplorer.Information.IwFsEntryLazyInfo"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Components.FileExplorer.Information.IwFsTaskInfo]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Business.Components.FileExplorer.Information.IwFsTaskInfo"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Components.FileExplorer.IwFsEntry]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Business.Components.FileExplorer.IwFsEntry"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Components.FileExplorer.IwFsPreview]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Business.Components.FileExplorer.IwFsPreview"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Components.Tasks.BackgroundTaskDto]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Business.Components.Tasks.BackgroundTaskDto"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Configurations.Models.Domain.ResourceOptions]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Business.Configurations.Models.Domain.ResourceOptions"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.BilibiliOptions]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Models.Configs.BilibiliOptions"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.EnhancerOptions]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Models.Configs.EnhancerOptions"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.ExHentaiOptions]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Models.Configs.ExHentaiOptions"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.FileSystemOptions]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Models.Configs.FileSystemOptions"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.JavLibraryOptions]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Models.Configs.JavLibraryOptions"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.NetworkOptions]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Models.Configs.NetworkOptions"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.PixivOptions]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Models.Configs.PixivOptions"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.ThirdPartyOptions]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Models.Configs.ThirdPartyOptions"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.UIOptions]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Models.Configs.UIOptions"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Models.Aos.ThirdPartyRequestStatistics[]]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Models.Models.Aos.ThirdPartyRequestStatistics"][];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Models.Dtos.DashboardStatistics]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Models.Models.Dtos.DashboardStatistics"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Models.Dtos.DownloadTaskDto]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Models.Models.Dtos.DownloadTaskDto"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Models.Dtos.PlaylistDto]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Models.Models.Dtos.PlaylistDto"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Models.Entities.ComponentOptions]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.InsideWorld.Models.Models.Entities.ComponentOptions"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Modules.Property.Models.View.CustomPropertyTypeConversionExampleViewModel]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Modules.Property.Models.View.CustomPropertyTypeConversionExampleViewModel"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Modules.Property.Models.View.CustomPropertyTypeConversionPreviewViewModel]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Modules.Property.Models.View.CustomPropertyTypeConversionPreviewViewModel"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Modules.Property.Models.View.PropertyViewModel]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Modules.Property.Models.View.PropertyViewModel"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Service.Models.View.BulkModificationViewModel]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Service.Models.View.BulkModificationViewModel"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Service.Models.View.CategoryViewModel]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Service.Models.View.CategoryViewModel"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Service.Models.View.CustomPropertyViewModel]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Service.Models.View.CustomPropertyViewModel"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Service.Models.View.FileSystemEntryGroupResultViewModel]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Service.Models.View.FileSystemEntryGroupResultViewModel"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Service.Models.View.ResourceSearchViewModel]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: components["schemas"]["Bakabase.Service.Models.View.ResourceSearchViewModel"];
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Boolean]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data: boolean;
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Collections.Generic.Dictionary`2[System.Int32,Bakabase.InsideWorld.Models.Models.Aos.DownloaderNamingDefinitions]]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: {
                [key: string]: components["schemas"]["Bakabase.InsideWorld.Models.Models.Aos.DownloaderNamingDefinitions"];
            };
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Collections.Generic.Dictionary`2[System.Int32,System.Collections.Generic.Dictionary`2[System.Int32,System.Collections.Generic.List`1[Bakabase.Modules.StandardValue.Models.View.StandardValueConversionRuleViewModel]]]]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: {
                [key: string]: {
                    [key: string]: components["schemas"]["Bakabase.Modules.StandardValue.Models.View.StandardValueConversionRuleViewModel"][];
                } | null;
            };
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Collections.Generic.Dictionary`2[System.Int32,System.Collections.Generic.List`1[Bakabase.Abstractions.Models.Domain.SpecialText]]]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: {
                [key: string]: components["schemas"]["Bakabase.Abstractions.Models.Domain.SpecialText"][] | null;
            };
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Collections.Generic.Dictionary`2[System.String,Bakabase.InsideWorld.Models.Constants.MediaType]]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: {
                [key: string]: components["schemas"]["Bakabase.InsideWorld.Models.Constants.MediaType"];
            };
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Collections.Generic.Dictionary`2[System.String,System.Collections.Generic.List`1[System.String]]]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: {
                [key: string]: string[] | null;
            };
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Collections.Generic.Dictionary`2[System.String,System.Int32]]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: {
                [key: string]: number;
            };
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Int32]": {
            /** Format: int32 */
            code: number;
            message?: string;
            /** Format: int32 */
            data: number;
        };
        "Bootstrap.Models.ResponseModels.SingletonResponse`1[System.String]": {
            /** Format: int32 */
            code: number;
            message?: string;
            data?: string;
        };
        /**
         * Format: int32
         * @description [0: Trace, 1: Debug, 2: Information, 3: Warning, 4: Error, 5: Critical, 6: None]
         * @enum {integer}
         */
        "Microsoft.Extensions.Logging.LogLevel": 0 | 1 | 2 | 3 | 4 | 5 | 6;
        "System.Enum": Record<string, never>;
        "System.IntPtr": Record<string, never>;
        "System.ModuleHandle": {
            /** Format: int32 */
            readonly mdStreamVersion: number;
        };
        "System.Reflection.Assembly": {
            readonly definedTypes: components["schemas"]["System.Reflection.TypeInfo"][];
            readonly exportedTypes: components["schemas"]["System.Type"][];
            /** @deprecated */
            readonly codeBase?: string;
            entryPoint?: components["schemas"]["System.Reflection.MethodInfo"];
            readonly fullName?: string;
            readonly imageRuntimeVersion: string;
            readonly isDynamic: boolean;
            readonly location: string;
            readonly reflectionOnly: boolean;
            readonly isCollectible: boolean;
            readonly isFullyTrusted: boolean;
            readonly customAttributes: components["schemas"]["System.Reflection.CustomAttributeData"][];
            /** @deprecated */
            readonly escapedCodeBase: string;
            manifestModule: components["schemas"]["System.Reflection.Module"];
            readonly modules: components["schemas"]["System.Reflection.Module"][];
            /** @deprecated */
            readonly globalAssemblyCache: boolean;
            /** Format: int64 */
            readonly hostContext: number;
            securityRuleSet: components["schemas"]["System.Security.SecurityRuleSet"];
        };
        /**
         * Format: int32
         * @description [1: Standard, 2: VarArgs, 3: Any, 32: HasThis, 64: ExplicitThis]
         * @enum {integer}
         */
        "System.Reflection.CallingConventions": 1 | 2 | 3 | 32 | 64;
        "System.Reflection.ConstructorInfo": {
            readonly name: string;
            declaringType?: components["schemas"]["System.Type"];
            reflectedType?: components["schemas"]["System.Type"];
            module: components["schemas"]["System.Reflection.Module"];
            readonly customAttributes: components["schemas"]["System.Reflection.CustomAttributeData"][];
            readonly isCollectible: boolean;
            /** Format: int32 */
            readonly metadataToken: number;
            attributes: components["schemas"]["System.Reflection.MethodAttributes"];
            methodImplementationFlags: components["schemas"]["System.Reflection.MethodImplAttributes"];
            callingConvention: components["schemas"]["System.Reflection.CallingConventions"];
            readonly isAbstract: boolean;
            readonly isConstructor: boolean;
            readonly isFinal: boolean;
            readonly isHideBySig: boolean;
            readonly isSpecialName: boolean;
            readonly isStatic: boolean;
            readonly isVirtual: boolean;
            readonly isAssembly: boolean;
            readonly isFamily: boolean;
            readonly isFamilyAndAssembly: boolean;
            readonly isFamilyOrAssembly: boolean;
            readonly isPrivate: boolean;
            readonly isPublic: boolean;
            readonly isConstructedGenericMethod: boolean;
            readonly isGenericMethod: boolean;
            readonly isGenericMethodDefinition: boolean;
            readonly containsGenericParameters: boolean;
            methodHandle: components["schemas"]["System.RuntimeMethodHandle"];
            readonly isSecurityCritical: boolean;
            readonly isSecuritySafeCritical: boolean;
            readonly isSecurityTransparent: boolean;
            memberType: components["schemas"]["System.Reflection.MemberTypes"];
        };
        "System.Reflection.CustomAttributeData": {
            attributeType: components["schemas"]["System.Type"];
            constructor: {
                readonly name: string;
                declaringType?: components["schemas"]["System.Type"];
                reflectedType?: components["schemas"]["System.Type"];
                module: components["schemas"]["System.Reflection.Module"];
                readonly customAttributes: components["schemas"]["System.Reflection.CustomAttributeData"][];
                readonly isCollectible: boolean;
                /** Format: int32 */
                readonly metadataToken: number;
                attributes: components["schemas"]["System.Reflection.MethodAttributes"];
                methodImplementationFlags: components["schemas"]["System.Reflection.MethodImplAttributes"];
                callingConvention: components["schemas"]["System.Reflection.CallingConventions"];
                readonly isAbstract: boolean;
                readonly isConstructor: boolean;
                readonly isFinal: boolean;
                readonly isHideBySig: boolean;
                readonly isSpecialName: boolean;
                readonly isStatic: boolean;
                readonly isVirtual: boolean;
                readonly isAssembly: boolean;
                readonly isFamily: boolean;
                readonly isFamilyAndAssembly: boolean;
                readonly isFamilyOrAssembly: boolean;
                readonly isPrivate: boolean;
                readonly isPublic: boolean;
                readonly isConstructedGenericMethod: boolean;
                readonly isGenericMethod: boolean;
                readonly isGenericMethodDefinition: boolean;
                readonly containsGenericParameters: boolean;
                methodHandle: components["schemas"]["System.RuntimeMethodHandle"];
                readonly isSecurityCritical: boolean;
                readonly isSecuritySafeCritical: boolean;
                readonly isSecurityTransparent: boolean;
                memberType: components["schemas"]["System.Reflection.MemberTypes"];
            };
            readonly constructorArguments: components["schemas"]["System.Reflection.CustomAttributeTypedArgument"][];
            readonly namedArguments: components["schemas"]["System.Reflection.CustomAttributeNamedArgument"][];
        };
        "System.Reflection.CustomAttributeNamedArgument": {
            memberInfo: components["schemas"]["System.Reflection.MemberInfo"];
            typedValue: components["schemas"]["System.Reflection.CustomAttributeTypedArgument"];
            readonly memberName: string;
            readonly isField: boolean;
        };
        "System.Reflection.CustomAttributeTypedArgument": {
            argumentType: components["schemas"]["System.Type"];
            value?: unknown;
        };
        /**
         * Format: int32
         * @description [0: None, 512: SpecialName, 1024: ReservedMask, 1024: ReservedMask]
         * @enum {integer}
         */
        "System.Reflection.EventAttributes": 0 | 512 | 1024;
        "System.Reflection.EventInfo": {
            readonly name: string;
            declaringType?: components["schemas"]["System.Type"];
            reflectedType?: components["schemas"]["System.Type"];
            module: components["schemas"]["System.Reflection.Module"];
            readonly customAttributes: components["schemas"]["System.Reflection.CustomAttributeData"][];
            readonly isCollectible: boolean;
            /** Format: int32 */
            readonly metadataToken: number;
            memberType: components["schemas"]["System.Reflection.MemberTypes"];
            attributes: components["schemas"]["System.Reflection.EventAttributes"];
            readonly isSpecialName: boolean;
            addMethod?: components["schemas"]["System.Reflection.MethodInfo"];
            removeMethod?: components["schemas"]["System.Reflection.MethodInfo"];
            raiseMethod?: components["schemas"]["System.Reflection.MethodInfo"];
            readonly isMulticast: boolean;
            eventHandlerType?: components["schemas"]["System.Type"];
        };
        /**
         * Format: int32
         * @description [0: PrivateScope, 1: Private, 2: FamANDAssem, 3: Assembly, 4: Family, 5: FamORAssem, 6: Public, 7: FieldAccessMask, 16: Static, 32: InitOnly, 64: Literal, 128: NotSerialized, 256: HasFieldRVA, 512: SpecialName, 1024: RTSpecialName, 4096: HasFieldMarshal, 8192: PinvokeImpl, 32768: HasDefault, 38144: ReservedMask]
         * @enum {integer}
         */
        "System.Reflection.FieldAttributes": 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 16 | 32 | 64 | 128 | 256 | 512 | 1024 | 4096 | 8192 | 32768 | 38144;
        "System.Reflection.FieldInfo": {
            readonly name: string;
            declaringType?: components["schemas"]["System.Type"];
            reflectedType?: components["schemas"]["System.Type"];
            module: components["schemas"]["System.Reflection.Module"];
            readonly customAttributes: components["schemas"]["System.Reflection.CustomAttributeData"][];
            readonly isCollectible: boolean;
            /** Format: int32 */
            readonly metadataToken: number;
            memberType: components["schemas"]["System.Reflection.MemberTypes"];
            attributes: components["schemas"]["System.Reflection.FieldAttributes"];
            fieldType: components["schemas"]["System.Type"];
            readonly isInitOnly: boolean;
            readonly isLiteral: boolean;
            /** @deprecated */
            readonly isNotSerialized: boolean;
            readonly isPinvokeImpl: boolean;
            readonly isSpecialName: boolean;
            readonly isStatic: boolean;
            readonly isAssembly: boolean;
            readonly isFamily: boolean;
            readonly isFamilyAndAssembly: boolean;
            readonly isFamilyOrAssembly: boolean;
            readonly isPrivate: boolean;
            readonly isPublic: boolean;
            readonly isSecurityCritical: boolean;
            readonly isSecuritySafeCritical: boolean;
            readonly isSecurityTransparent: boolean;
            fieldHandle: components["schemas"]["System.RuntimeFieldHandle"];
        };
        /**
         * Format: int32
         * @description [0: None, 1: Covariant, 2: Contravariant, 3: VarianceMask, 4: ReferenceTypeConstraint, 8: NotNullableValueTypeConstraint, 16: DefaultConstructorConstraint, 28: SpecialConstraintMask, 32: AllowByRefLike]
         * @enum {integer}
         */
        "System.Reflection.GenericParameterAttributes": 0 | 1 | 2 | 3 | 4 | 8 | 16 | 28 | 32;
        "System.Reflection.ICustomAttributeProvider": Record<string, never>;
        "System.Reflection.MemberInfo": {
            memberType: components["schemas"]["System.Reflection.MemberTypes"];
            readonly name: string;
            declaringType?: components["schemas"]["System.Type"];
            reflectedType?: components["schemas"]["System.Type"];
            module: components["schemas"]["System.Reflection.Module"];
            readonly customAttributes: components["schemas"]["System.Reflection.CustomAttributeData"][];
            readonly isCollectible: boolean;
            /** Format: int32 */
            readonly metadataToken: number;
        };
        /**
         * Format: int32
         * @description [1: Constructor, 2: Event, 4: Field, 8: Method, 16: Property, 32: TypeInfo, 64: Custom, 128: NestedType, 191: All]
         * @enum {integer}
         */
        "System.Reflection.MemberTypes": 1 | 2 | 4 | 8 | 16 | 32 | 64 | 128 | 191;
        /**
         * Format: int32
         * @description [0: PrivateScope, 0: PrivateScope, 1: Private, 2: FamANDAssem, 3: Assembly, 4: Family, 5: FamORAssem, 6: Public, 7: MemberAccessMask, 8: UnmanagedExport, 16: Static, 32: Final, 64: Virtual, 128: HideBySig, 256: VtableLayoutMask, 256: VtableLayoutMask, 512: CheckAccessOnOverride, 1024: Abstract, 2048: SpecialName, 4096: RTSpecialName, 8192: PinvokeImpl, 16384: HasSecurity, 32768: RequireSecObject, 53248: ReservedMask]
         * @enum {integer}
         */
        "System.Reflection.MethodAttributes": 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 16 | 32 | 64 | 128 | 256 | 512 | 1024 | 2048 | 4096 | 8192 | 16384 | 32768 | 53248;
        "System.Reflection.MethodBase": {
            memberType: components["schemas"]["System.Reflection.MemberTypes"];
            readonly name: string;
            declaringType?: components["schemas"]["System.Type"];
            reflectedType?: components["schemas"]["System.Type"];
            module: components["schemas"]["System.Reflection.Module"];
            readonly customAttributes: components["schemas"]["System.Reflection.CustomAttributeData"][];
            readonly isCollectible: boolean;
            /** Format: int32 */
            readonly metadataToken: number;
            attributes: components["schemas"]["System.Reflection.MethodAttributes"];
            methodImplementationFlags: components["schemas"]["System.Reflection.MethodImplAttributes"];
            callingConvention: components["schemas"]["System.Reflection.CallingConventions"];
            readonly isAbstract: boolean;
            readonly isConstructor: boolean;
            readonly isFinal: boolean;
            readonly isHideBySig: boolean;
            readonly isSpecialName: boolean;
            readonly isStatic: boolean;
            readonly isVirtual: boolean;
            readonly isAssembly: boolean;
            readonly isFamily: boolean;
            readonly isFamilyAndAssembly: boolean;
            readonly isFamilyOrAssembly: boolean;
            readonly isPrivate: boolean;
            readonly isPublic: boolean;
            readonly isConstructedGenericMethod: boolean;
            readonly isGenericMethod: boolean;
            readonly isGenericMethodDefinition: boolean;
            readonly containsGenericParameters: boolean;
            methodHandle: components["schemas"]["System.RuntimeMethodHandle"];
            readonly isSecurityCritical: boolean;
            readonly isSecuritySafeCritical: boolean;
            readonly isSecurityTransparent: boolean;
        };
        /**
         * Format: int32
         * @description [0: IL, 0: IL, 1: Native, 2: OPTIL, 3: CodeTypeMask, 3: CodeTypeMask, 4: ManagedMask, 4: ManagedMask, 8: NoInlining, 16: ForwardRef, 32: Synchronized, 64: NoOptimization, 128: PreserveSig, 256: AggressiveInlining, 512: AggressiveOptimization, 4096: InternalCall, 65535: MaxMethodImplVal]
         * @enum {integer}
         */
        "System.Reflection.MethodImplAttributes": 0 | 1 | 2 | 3 | 4 | 8 | 16 | 32 | 64 | 128 | 256 | 512 | 4096 | 65535;
        "System.Reflection.MethodInfo": {
            readonly name: string;
            declaringType?: components["schemas"]["System.Type"];
            reflectedType?: components["schemas"]["System.Type"];
            module: components["schemas"]["System.Reflection.Module"];
            readonly customAttributes: components["schemas"]["System.Reflection.CustomAttributeData"][];
            readonly isCollectible: boolean;
            /** Format: int32 */
            readonly metadataToken: number;
            attributes: components["schemas"]["System.Reflection.MethodAttributes"];
            methodImplementationFlags: components["schemas"]["System.Reflection.MethodImplAttributes"];
            callingConvention: components["schemas"]["System.Reflection.CallingConventions"];
            readonly isAbstract: boolean;
            readonly isConstructor: boolean;
            readonly isFinal: boolean;
            readonly isHideBySig: boolean;
            readonly isSpecialName: boolean;
            readonly isStatic: boolean;
            readonly isVirtual: boolean;
            readonly isAssembly: boolean;
            readonly isFamily: boolean;
            readonly isFamilyAndAssembly: boolean;
            readonly isFamilyOrAssembly: boolean;
            readonly isPrivate: boolean;
            readonly isPublic: boolean;
            readonly isConstructedGenericMethod: boolean;
            readonly isGenericMethod: boolean;
            readonly isGenericMethodDefinition: boolean;
            readonly containsGenericParameters: boolean;
            methodHandle: components["schemas"]["System.RuntimeMethodHandle"];
            readonly isSecurityCritical: boolean;
            readonly isSecuritySafeCritical: boolean;
            readonly isSecurityTransparent: boolean;
            memberType: components["schemas"]["System.Reflection.MemberTypes"];
            returnParameter: components["schemas"]["System.Reflection.ParameterInfo"];
            returnType: components["schemas"]["System.Type"];
            returnTypeCustomAttributes: components["schemas"]["System.Reflection.ICustomAttributeProvider"];
        };
        "System.Reflection.Module": {
            assembly: components["schemas"]["System.Reflection.Assembly"];
            readonly fullyQualifiedName: string;
            readonly name: string;
            /** Format: int32 */
            readonly mdStreamVersion: number;
            /** Format: uuid */
            readonly moduleVersionId: string;
            readonly scopeName: string;
            moduleHandle: components["schemas"]["System.ModuleHandle"];
            readonly customAttributes: components["schemas"]["System.Reflection.CustomAttributeData"][];
            /** Format: int32 */
            readonly metadataToken: number;
        };
        /**
         * Format: int32
         * @description [0: None, 1: In, 2: Out, 4: Lcid, 8: Retval, 16: Optional, 4096: HasDefault, 8192: HasFieldMarshal, 16384: Reserved3, 32768: Reserved4, 61440: ReservedMask]
         * @enum {integer}
         */
        "System.Reflection.ParameterAttributes": 0 | 1 | 2 | 4 | 8 | 16 | 4096 | 8192 | 16384 | 32768 | 61440;
        "System.Reflection.ParameterInfo": {
            attributes: components["schemas"]["System.Reflection.ParameterAttributes"];
            member: components["schemas"]["System.Reflection.MemberInfo"];
            readonly name?: string;
            parameterType: components["schemas"]["System.Type"];
            /** Format: int32 */
            readonly position: number;
            readonly isIn: boolean;
            readonly isLcid: boolean;
            readonly isOptional: boolean;
            readonly isOut: boolean;
            readonly isRetval: boolean;
            readonly defaultValue?: unknown;
            readonly rawDefaultValue?: unknown;
            readonly hasDefaultValue: boolean;
            readonly customAttributes: components["schemas"]["System.Reflection.CustomAttributeData"][];
            /** Format: int32 */
            readonly metadataToken: number;
        };
        /**
         * Format: int32
         * @description [0: None, 512: SpecialName, 1024: RTSpecialName, 4096: HasDefault, 8192: Reserved2, 16384: Reserved3, 32768: Reserved4, 62464: ReservedMask]
         * @enum {integer}
         */
        "System.Reflection.PropertyAttributes": 0 | 512 | 1024 | 4096 | 8192 | 16384 | 32768 | 62464;
        "System.Reflection.PropertyInfo": {
            readonly name: string;
            declaringType?: components["schemas"]["System.Type"];
            reflectedType?: components["schemas"]["System.Type"];
            module: components["schemas"]["System.Reflection.Module"];
            readonly customAttributes: components["schemas"]["System.Reflection.CustomAttributeData"][];
            readonly isCollectible: boolean;
            /** Format: int32 */
            readonly metadataToken: number;
            memberType: components["schemas"]["System.Reflection.MemberTypes"];
            propertyType: components["schemas"]["System.Type"];
            attributes: components["schemas"]["System.Reflection.PropertyAttributes"];
            readonly isSpecialName: boolean;
            readonly canRead: boolean;
            readonly canWrite: boolean;
            getMethod?: components["schemas"]["System.Reflection.MethodInfo"];
            setMethod?: components["schemas"]["System.Reflection.MethodInfo"];
        };
        /**
         * Format: int32
         * @description [0: NotPublic, 0: NotPublic, 0: NotPublic, 0: NotPublic, 1: Public, 2: NestedPublic, 3: NestedPrivate, 4: NestedFamily, 5: NestedAssembly, 6: NestedFamANDAssem, 7: NestedFamORAssem, 7: NestedFamORAssem, 8: SequentialLayout, 16: ExplicitLayout, 24: LayoutMask, 32: ClassSemanticsMask, 32: ClassSemanticsMask, 128: Abstract, 256: Sealed, 1024: SpecialName, 2048: RTSpecialName, 4096: Import, 8192: Serializable, 16384: WindowsRuntime, 65536: UnicodeClass, 131072: AutoClass, 196608: CustomFormatClass, 196608: CustomFormatClass, 262144: HasSecurity, 264192: ReservedMask, 1048576: BeforeFieldInit, 12582912: CustomFormatMask]
         * @enum {integer}
         */
        "System.Reflection.TypeAttributes": 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 16 | 24 | 32 | 128 | 256 | 1024 | 2048 | 4096 | 8192 | 16384 | 65536 | 131072 | 196608 | 262144 | 264192 | 1048576 | 12582912;
        "System.Reflection.TypeInfo": {
            readonly name: string;
            readonly customAttributes: components["schemas"]["System.Reflection.CustomAttributeData"][];
            readonly isCollectible: boolean;
            /** Format: int32 */
            readonly metadataToken: number;
            memberType: components["schemas"]["System.Reflection.MemberTypes"];
            readonly namespace?: string;
            readonly assemblyQualifiedName?: string;
            readonly fullName?: string;
            assembly: components["schemas"]["System.Reflection.Assembly"];
            module: components["schemas"]["System.Reflection.Module"];
            readonly isInterface: boolean;
            readonly isNested: boolean;
            declaringType?: components["schemas"]["System.Type"];
            declaringMethod?: components["schemas"]["System.Reflection.MethodBase"];
            reflectedType?: components["schemas"]["System.Type"];
            underlyingSystemType: components["schemas"]["System.Type"];
            readonly isTypeDefinition: boolean;
            readonly isArray: boolean;
            readonly isByRef: boolean;
            readonly isPointer: boolean;
            readonly isConstructedGenericType: boolean;
            readonly isGenericParameter: boolean;
            readonly isGenericTypeParameter: boolean;
            readonly isGenericMethodParameter: boolean;
            readonly isGenericType: boolean;
            readonly isGenericTypeDefinition: boolean;
            readonly isSZArray: boolean;
            readonly isVariableBoundArray: boolean;
            readonly isByRefLike: boolean;
            readonly isFunctionPointer: boolean;
            readonly isUnmanagedFunctionPointer: boolean;
            readonly hasElementType: boolean;
            readonly genericTypeArguments: components["schemas"]["System.Type"][];
            /** Format: int32 */
            readonly genericParameterPosition: number;
            genericParameterAttributes: components["schemas"]["System.Reflection.GenericParameterAttributes"];
            attributes: components["schemas"]["System.Reflection.TypeAttributes"];
            readonly isAbstract: boolean;
            readonly isImport: boolean;
            readonly isSealed: boolean;
            readonly isSpecialName: boolean;
            readonly isClass: boolean;
            readonly isNestedAssembly: boolean;
            readonly isNestedFamANDAssem: boolean;
            readonly isNestedFamily: boolean;
            readonly isNestedFamORAssem: boolean;
            readonly isNestedPrivate: boolean;
            readonly isNestedPublic: boolean;
            readonly isNotPublic: boolean;
            readonly isPublic: boolean;
            readonly isAutoLayout: boolean;
            readonly isExplicitLayout: boolean;
            readonly isLayoutSequential: boolean;
            readonly isAnsiClass: boolean;
            readonly isAutoClass: boolean;
            readonly isUnicodeClass: boolean;
            readonly isCOMObject: boolean;
            readonly isContextful: boolean;
            readonly isEnum: boolean;
            readonly isMarshalByRef: boolean;
            readonly isPrimitive: boolean;
            readonly isValueType: boolean;
            readonly isSignatureType: boolean;
            readonly isSecurityCritical: boolean;
            readonly isSecuritySafeCritical: boolean;
            readonly isSecurityTransparent: boolean;
            structLayoutAttribute?: components["schemas"]["System.Runtime.InteropServices.StructLayoutAttribute"];
            typeInitializer?: components["schemas"]["System.Reflection.ConstructorInfo"];
            typeHandle: components["schemas"]["System.RuntimeTypeHandle"];
            /** Format: uuid */
            readonly guid: string;
            baseType?: components["schemas"]["System.Type"];
            /** @deprecated */
            readonly isSerializable: boolean;
            readonly containsGenericParameters: boolean;
            readonly isVisible: boolean;
            readonly genericTypeParameters: components["schemas"]["System.Type"][];
            readonly declaredConstructors: components["schemas"]["System.Reflection.ConstructorInfo"][];
            readonly declaredEvents: components["schemas"]["System.Reflection.EventInfo"][];
            readonly declaredFields: components["schemas"]["System.Reflection.FieldInfo"][];
            readonly declaredMembers: components["schemas"]["System.Reflection.MemberInfo"][];
            readonly declaredMethods: components["schemas"]["System.Reflection.MethodInfo"][];
            readonly declaredNestedTypes: components["schemas"]["System.Reflection.TypeInfo"][];
            readonly declaredProperties: components["schemas"]["System.Reflection.PropertyInfo"][];
            readonly implementedInterfaces: components["schemas"]["System.Type"][];
        };
        /**
         * Format: int32
         * @description [0: X86, 1: X64, 2: Arm, 3: Arm64, 4: Wasm, 5: S390x, 6: LoongArch64, 7: Armv6, 8: Ppc64le, 9: RiscV64]
         * @enum {integer}
         */
        "System.Runtime.InteropServices.Architecture": 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
        /**
         * Format: int32
         * @description [0: Sequential, 2: Explicit, 3: Auto]
         * @enum {integer}
         */
        "System.Runtime.InteropServices.LayoutKind": 0 | 2 | 3;
        "System.Runtime.InteropServices.OSPlatform": Record<string, never>;
        "System.Runtime.InteropServices.StructLayoutAttribute": {
            readonly typeId: unknown;
            value: components["schemas"]["System.Runtime.InteropServices.LayoutKind"];
        };
        "System.RuntimeFieldHandle": {
            value: components["schemas"]["System.IntPtr"];
        };
        "System.RuntimeMethodHandle": {
            value: components["schemas"]["System.IntPtr"];
        };
        "System.RuntimeTypeHandle": {
            value: components["schemas"]["System.IntPtr"];
        };
        /**
         * Format: int32
         * @description [0: None, 1: Level1, 2: Level2]
         * @enum {integer}
         */
        "System.Security.SecurityRuleSet": 0 | 1 | 2;
        "System.Type": {
            readonly name: string;
            readonly customAttributes: components["schemas"]["System.Reflection.CustomAttributeData"][];
            readonly isCollectible: boolean;
            /** Format: int32 */
            readonly metadataToken: number;
            memberType: components["schemas"]["System.Reflection.MemberTypes"];
            readonly namespace?: string;
            readonly assemblyQualifiedName?: string;
            readonly fullName?: string;
            assembly: components["schemas"]["System.Reflection.Assembly"];
            module: components["schemas"]["System.Reflection.Module"];
            readonly isInterface: boolean;
            readonly isNested: boolean;
            declaringType?: components["schemas"]["System.Type"];
            declaringMethod?: components["schemas"]["System.Reflection.MethodBase"];
            reflectedType?: components["schemas"]["System.Type"];
            underlyingSystemType: components["schemas"]["System.Type"];
            readonly isTypeDefinition: boolean;
            readonly isArray: boolean;
            readonly isByRef: boolean;
            readonly isPointer: boolean;
            readonly isConstructedGenericType: boolean;
            readonly isGenericParameter: boolean;
            readonly isGenericTypeParameter: boolean;
            readonly isGenericMethodParameter: boolean;
            readonly isGenericType: boolean;
            readonly isGenericTypeDefinition: boolean;
            readonly isSZArray: boolean;
            readonly isVariableBoundArray: boolean;
            readonly isByRefLike: boolean;
            readonly isFunctionPointer: boolean;
            readonly isUnmanagedFunctionPointer: boolean;
            readonly hasElementType: boolean;
            readonly genericTypeArguments: components["schemas"]["System.Type"][];
            /** Format: int32 */
            readonly genericParameterPosition: number;
            genericParameterAttributes: components["schemas"]["System.Reflection.GenericParameterAttributes"];
            attributes: components["schemas"]["System.Reflection.TypeAttributes"];
            readonly isAbstract: boolean;
            readonly isImport: boolean;
            readonly isSealed: boolean;
            readonly isSpecialName: boolean;
            readonly isClass: boolean;
            readonly isNestedAssembly: boolean;
            readonly isNestedFamANDAssem: boolean;
            readonly isNestedFamily: boolean;
            readonly isNestedFamORAssem: boolean;
            readonly isNestedPrivate: boolean;
            readonly isNestedPublic: boolean;
            readonly isNotPublic: boolean;
            readonly isPublic: boolean;
            readonly isAutoLayout: boolean;
            readonly isExplicitLayout: boolean;
            readonly isLayoutSequential: boolean;
            readonly isAnsiClass: boolean;
            readonly isAutoClass: boolean;
            readonly isUnicodeClass: boolean;
            readonly isCOMObject: boolean;
            readonly isContextful: boolean;
            readonly isEnum: boolean;
            readonly isMarshalByRef: boolean;
            readonly isPrimitive: boolean;
            readonly isValueType: boolean;
            readonly isSignatureType: boolean;
            readonly isSecurityCritical: boolean;
            readonly isSecuritySafeCritical: boolean;
            readonly isSecurityTransparent: boolean;
            structLayoutAttribute?: components["schemas"]["System.Runtime.InteropServices.StructLayoutAttribute"];
            typeInitializer?: components["schemas"]["System.Reflection.ConstructorInfo"];
            typeHandle: components["schemas"]["System.RuntimeTypeHandle"];
            /** Format: uuid */
            readonly guid: string;
            baseType?: components["schemas"]["System.Type"];
            /** @deprecated */
            readonly isSerializable: boolean;
            readonly containsGenericParameters: boolean;
            readonly isVisible: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    SearchAliasGroups: {
        parameters: {
            query?: {
                texts?: string[];
                text?: string;
                fuzzyText?: string;
                pageIndex?: number;
                pageSize?: number;
                skipCount?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SearchResponse`1[Bakabase.Modules.Alias.Abstractions.Models.Domain.Alias]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SearchResponse`1[Bakabase.Modules.Alias.Abstractions.Models.Domain.Alias]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SearchResponse`1[Bakabase.Modules.Alias.Abstractions.Models.Domain.Alias]"];
                };
            };
        };
    };
    PatchAlias: {
        parameters: {
            query?: {
                text?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Modules.Alias.Models.Input.AliasPatchInputModel"];
                "application/json": components["schemas"]["Bakabase.Modules.Alias.Models.Input.AliasPatchInputModel"];
                "text/json": components["schemas"]["Bakabase.Modules.Alias.Models.Input.AliasPatchInputModel"];
                "application/*+json": components["schemas"]["Bakabase.Modules.Alias.Models.Input.AliasPatchInputModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    AddAlias: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Modules.Alias.Models.Input.AliasAddInputModel"];
                "application/json": components["schemas"]["Bakabase.Modules.Alias.Models.Input.AliasAddInputModel"];
                "text/json": components["schemas"]["Bakabase.Modules.Alias.Models.Input.AliasAddInputModel"];
                "application/*+json": components["schemas"]["Bakabase.Modules.Alias.Models.Input.AliasAddInputModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    DeleteAlias: {
        parameters: {
            query?: {
                text?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    DeleteAliasGroups: {
        parameters: {
            query?: {
                preferredTexts?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    MergeAliasGroups: {
        parameters: {
            query?: {
                preferredTexts?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    ExportAliases: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    ImportAliases: {
        parameters: {
            query?: {
                path?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    CheckAppInitialized: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.Domain.Constants.InitializationContentType]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.Domain.Constants.InitializationContentType]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.Domain.Constants.InitializationContentType]"];
                };
            };
        };
    };
    GetAppInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Infrastructures.Components.App.Models.ResponseModels.AppInfo]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Infrastructures.Components.App.Models.ResponseModels.AppInfo]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Infrastructures.Components.App.Models.ResponseModels.AppInfo]"];
                };
            };
        };
    };
    AcceptTerms: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    MoveCoreData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Infrastructures.Components.App.Models.RequestModels.CoreDataMoveRequestModel"];
                "application/json": components["schemas"]["Bakabase.Infrastructures.Components.App.Models.RequestModels.CoreDataMoveRequestModel"];
                "text/json": components["schemas"]["Bakabase.Infrastructures.Components.App.Models.RequestModels.CoreDataMoveRequestModel"];
                "application/*+json": components["schemas"]["Bakabase.Infrastructures.Components.App.Models.RequestModels.CoreDataMoveRequestModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetAllBackgroundTasks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.InsideWorld.Business.Components.Tasks.BackgroundTaskDto]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.InsideWorld.Business.Components.Tasks.BackgroundTaskDto]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.InsideWorld.Business.Components.Tasks.BackgroundTaskDto]"];
                };
            };
        };
    };
    ClearInactiveBackgroundTasks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetBackgroundTaskByName: {
        parameters: {
            query?: {
                name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Components.Tasks.BackgroundTaskDto]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Components.Tasks.BackgroundTaskDto]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Components.Tasks.BackgroundTaskDto]"];
                };
            };
        };
    };
    StopBackgroundTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    RemoveBackgroundTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetBiliBiliFavorites: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Modules.ThirdParty.ThirdParties.Bilibili.Models.Favorites]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Modules.ThirdParty.ThirdParties.Bilibili.Models.Favorites]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Modules.ThirdParty.ThirdParties.Bilibili.Models.Favorites]"];
                };
            };
        };
    };
    GetBulkModification: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Service.Models.View.BulkModificationViewModel]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Service.Models.View.BulkModificationViewModel]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Service.Models.View.BulkModificationViewModel]"];
                };
            };
        };
    };
    DuplicateBulkModification: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    DeleteBulkModification: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    PatchBulkModification: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Service.Models.Input.BulkModificationPatchInputModel"];
                "application/json": components["schemas"]["Bakabase.Service.Models.Input.BulkModificationPatchInputModel"];
                "text/json": components["schemas"]["Bakabase.Service.Models.Input.BulkModificationPatchInputModel"];
                "application/*+json": components["schemas"]["Bakabase.Service.Models.Input.BulkModificationPatchInputModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetAllBulkModifications: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.BulkModificationViewModel]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.BulkModificationViewModel]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.BulkModificationViewModel]"];
                };
            };
        };
    };
    AddBulkModification: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    FilterResourcesInBulkModification: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    PreviewBulkModification: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    SearchBulkModificationDiffs: {
        parameters: {
            query?: {
                path?: string;
                pageIndex?: number;
                pageSize?: number;
                skipCount?: number;
            };
            header?: never;
            path: {
                bmId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SearchResponse`1[Bakabase.Service.Models.View.BulkModificationDiffViewModel]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SearchResponse`1[Bakabase.Service.Models.View.BulkModificationDiffViewModel]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SearchResponse`1[Bakabase.Service.Models.View.BulkModificationDiffViewModel]"];
                };
            };
        };
    };
    ApplyBulkModification: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    RevertBulkModification: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetCacheOverview: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.View.CacheOverviewViewModel]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.View.CacheOverviewViewModel]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.View.CacheOverviewViewModel]"];
                };
            };
        };
    };
    DeleteResourceCacheByCategoryIdAndCacheType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                categoryId: number;
                /** @description [1: Covers, 2: PlayableFiles] */
                type: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.ResourceCacheType"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetCategory: {
        parameters: {
            query?: {
                /** @description [0: None, 1: Components, 3: Validation, 4: CustomProperties, 8: EnhancerOptions] */
                additionalItems?: components["schemas"]["Bakabase.InsideWorld.Models.Constants.AdditionalItems.CategoryAdditionalItem"];
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Service.Models.View.CategoryViewModel]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Service.Models.View.CategoryViewModel]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Service.Models.View.CategoryViewModel]"];
                };
            };
        };
    };
    DeleteCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    PatchCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Abstractions.Models.Input.CategoryPatchInputModel"];
                "application/json": components["schemas"]["Bakabase.Abstractions.Models.Input.CategoryPatchInputModel"];
                "text/json": components["schemas"]["Bakabase.Abstractions.Models.Input.CategoryPatchInputModel"];
                "application/*+json": components["schemas"]["Bakabase.Abstractions.Models.Input.CategoryPatchInputModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetAllCategories: {
        parameters: {
            query?: {
                /** @description [0: None, 1: Components, 3: Validation, 4: CustomProperties, 8: EnhancerOptions] */
                additionalItems?: components["schemas"]["Bakabase.InsideWorld.Models.Constants.AdditionalItems.CategoryAdditionalItem"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.CategoryViewModel]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.CategoryViewModel]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.CategoryViewModel]"];
                };
            };
        };
    };
    AddCategory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Abstractions.Models.Input.CategoryAddInputModel"];
                "application/json": components["schemas"]["Bakabase.Abstractions.Models.Input.CategoryAddInputModel"];
                "text/json": components["schemas"]["Bakabase.Abstractions.Models.Input.CategoryAddInputModel"];
                "application/*+json": components["schemas"]["Bakabase.Abstractions.Models.Input.CategoryAddInputModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    DuplicateCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Abstractions.Models.Input.CategoryDuplicateInputModel"];
                "application/json": components["schemas"]["Bakabase.Abstractions.Models.Input.CategoryDuplicateInputModel"];
                "text/json": components["schemas"]["Bakabase.Abstractions.Models.Input.CategoryDuplicateInputModel"];
                "application/*+json": components["schemas"]["Bakabase.Abstractions.Models.Input.CategoryDuplicateInputModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    PutCategoryResourceDisplayNameTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": string;
                "application/json": string;
                "text/json": string;
                "application/*+json": string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    ConfigureCategoryComponents: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Abstractions.Models.Input.CategoryComponentConfigureInputModel"];
                "application/json": components["schemas"]["Bakabase.Abstractions.Models.Input.CategoryComponentConfigureInputModel"];
                "text/json": components["schemas"]["Bakabase.Abstractions.Models.Input.CategoryComponentConfigureInputModel"];
                "application/*+json": components["schemas"]["Bakabase.Abstractions.Models.Input.CategoryComponentConfigureInputModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    SortCategories: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.IdBasedSortRequestModel"];
                "application/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.IdBasedSortRequestModel"];
                "text/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.IdBasedSortRequestModel"];
                "application/*+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.IdBasedSortRequestModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    BindCustomPropertiesToCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Abstractions.Models.Input.CategoryCustomPropertyBindInputModel"];
                "application/json": components["schemas"]["Bakabase.Abstractions.Models.Input.CategoryCustomPropertyBindInputModel"];
                "text/json": components["schemas"]["Bakabase.Abstractions.Models.Input.CategoryCustomPropertyBindInputModel"];
                "application/*+json": components["schemas"]["Bakabase.Abstractions.Models.Input.CategoryCustomPropertyBindInputModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    BindCustomPropertyToCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                categoryId: number;
                customPropertyId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    PreviewCategoryDisplayNameTemplate: {
        parameters: {
            query?: {
                template?: string;
                maxCount?: number;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Abstractions.Models.View.CategoryResourceDisplayNameViewModel]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Abstractions.Models.View.CategoryResourceDisplayNameViewModel]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Abstractions.Models.View.CategoryResourceDisplayNameViewModel]"];
                };
            };
        };
    };
    GetCategoryEnhancerOptions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
                enhancerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.Domain.CategoryEnhancerOptions]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.Domain.CategoryEnhancerOptions]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.Domain.CategoryEnhancerOptions]"];
                };
            };
        };
    };
    PatchCategoryEnhancerOptions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
                enhancerId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Modules.Enhancer.Models.Input.CategoryEnhancerOptionsPatchInputModel"];
                "application/json": components["schemas"]["Bakabase.Modules.Enhancer.Models.Input.CategoryEnhancerOptionsPatchInputModel"];
                "text/json": components["schemas"]["Bakabase.Modules.Enhancer.Models.Input.CategoryEnhancerOptionsPatchInputModel"];
                "application/*+json": components["schemas"]["Bakabase.Modules.Enhancer.Models.Input.CategoryEnhancerOptionsPatchInputModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    DeleteCategoryEnhancerTargetOptions: {
        parameters: {
            query?: {
                target?: number;
                dynamicTarget?: string;
            };
            header?: never;
            path: {
                id: number;
                enhancerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    PatchCategoryEnhancerTargetOptions: {
        parameters: {
            query: {
                target: number;
                dynamicTarget?: string;
            };
            header?: never;
            path: {
                id: number;
                enhancerId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Modules.Enhancer.Models.Input.CategoryEnhancerTargetOptionsPatchInputModel"];
                "application/json": components["schemas"]["Bakabase.Modules.Enhancer.Models.Input.CategoryEnhancerTargetOptionsPatchInputModel"];
                "text/json": components["schemas"]["Bakabase.Modules.Enhancer.Models.Input.CategoryEnhancerTargetOptionsPatchInputModel"];
                "application/*+json": components["schemas"]["Bakabase.Modules.Enhancer.Models.Input.CategoryEnhancerTargetOptionsPatchInputModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    UnbindCategoryEnhancerTargetProperty: {
        parameters: {
            query: {
                target: number;
                dynamicTarget?: string;
            };
            header?: never;
            path: {
                id: number;
                enhancerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    StartSyncingCategoryResources: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetComponentDescriptors: {
        parameters: {
            query?: {
                /** @description [1: Enhancer, 2: PlayableFileSelector, 3: Player] */
                type?: components["schemas"]["Bakabase.InsideWorld.Models.Constants.ComponentType"];
                /** @description [0: None, 1: AssociatedCategories] */
                additionalItems?: components["schemas"]["Bakabase.InsideWorld.Models.Constants.AdditionalItems.ComponentDescriptorAdditionalItem"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Abstractions.Models.Domain.ComponentDescriptor]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Abstractions.Models.Domain.ComponentDescriptor]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Abstractions.Models.Domain.ComponentDescriptor]"];
                };
            };
        };
    };
    GetComponentDescriptorByKey: {
        parameters: {
            query?: {
                key?: string;
                /** @description [0: None, 1: AssociatedCategories] */
                additionalItems?: components["schemas"]["Bakabase.InsideWorld.Models.Constants.AdditionalItems.ComponentDescriptorAdditionalItem"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.Domain.ComponentDescriptor]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.Domain.ComponentDescriptor]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.Domain.ComponentDescriptor]"];
                };
            };
        };
    };
    DiscoverDependentComponent: {
        parameters: {
            query?: {
                id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetDependentComponentLatestVersion: {
        parameters: {
            query?: {
                id?: string;
                fromCache?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Components.Dependency.Abstractions.DependentComponentVersion]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Components.Dependency.Abstractions.DependentComponentVersion]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Components.Dependency.Abstractions.DependentComponentVersion]"];
                };
            };
        };
    };
    InstallDependentComponent: {
        parameters: {
            query?: {
                id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    AddComponentOptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.ComponentOptionsAddRequestModel"];
                "application/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.ComponentOptionsAddRequestModel"];
                "text/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.ComponentOptionsAddRequestModel"];
                "application/*+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.ComponentOptionsAddRequestModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Models.Entities.ComponentOptions]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Models.Entities.ComponentOptions]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Models.Entities.ComponentOptions]"];
                };
            };
        };
    };
    PutComponentOptions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.ComponentOptionsAddRequestModel"];
                "application/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.ComponentOptionsAddRequestModel"];
                "text/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.ComponentOptionsAddRequestModel"];
                "application/*+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.ComponentOptionsAddRequestModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    RemoveComponentOptions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetAllExtensionMediaTypes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Collections.Generic.Dictionary`2[System.String,Bakabase.InsideWorld.Models.Constants.MediaType]]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Collections.Generic.Dictionary`2[System.String,Bakabase.InsideWorld.Models.Constants.MediaType]]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Collections.Generic.Dictionary`2[System.String,Bakabase.InsideWorld.Models.Constants.MediaType]]"];
                };
            };
        };
    };
    GetAllCustomProperties: {
        parameters: {
            query?: {
                /** @description [0: None, 1: Category, 2: ValueCount] */
                additionalItems?: components["schemas"]["Bakabase.InsideWorld.Models.Constants.AdditionalItems.CustomPropertyAdditionalItem"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.CustomPropertyViewModel]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.CustomPropertyViewModel]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.CustomPropertyViewModel]"];
                };
            };
        };
    };
    GetCustomPropertyByKeys: {
        parameters: {
            query?: {
                ids?: number[];
                /** @description [0: None, 1: Category, 2: ValueCount] */
                additionalItems?: components["schemas"]["Bakabase.InsideWorld.Models.Constants.AdditionalItems.CustomPropertyAdditionalItem"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.CustomPropertyViewModel]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.CustomPropertyViewModel]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.CustomPropertyViewModel]"];
                };
            };
        };
    };
    AddCustomProperty: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Abstractions.Models.Dto.CustomPropertyAddOrPutDto"];
                "application/json": components["schemas"]["Bakabase.Abstractions.Models.Dto.CustomPropertyAddOrPutDto"];
                "text/json": components["schemas"]["Bakabase.Abstractions.Models.Dto.CustomPropertyAddOrPutDto"];
                "application/*+json": components["schemas"]["Bakabase.Abstractions.Models.Dto.CustomPropertyAddOrPutDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Service.Models.View.CustomPropertyViewModel]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Service.Models.View.CustomPropertyViewModel]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Service.Models.View.CustomPropertyViewModel]"];
                };
            };
        };
    };
    PutCustomProperty: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Abstractions.Models.Dto.CustomPropertyAddOrPutDto"];
                "application/json": components["schemas"]["Bakabase.Abstractions.Models.Dto.CustomPropertyAddOrPutDto"];
                "text/json": components["schemas"]["Bakabase.Abstractions.Models.Dto.CustomPropertyAddOrPutDto"];
                "application/*+json": components["schemas"]["Bakabase.Abstractions.Models.Dto.CustomPropertyAddOrPutDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Service.Models.View.CustomPropertyViewModel]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Service.Models.View.CustomPropertyViewModel]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Service.Models.View.CustomPropertyViewModel]"];
                };
            };
        };
    };
    RemoveCustomProperty: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    PreviewCustomPropertyTypeConversion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sourceCustomPropertyId: number;
                /** @description [1: SingleLineText, 2: MultilineText, 3: SingleChoice, 4: MultipleChoice, 5: Number, 6: Percentage, 7: Rating, 8: Boolean, 9: Link, 10: Attachment, 11: Date, 12: DateTime, 13: Time, 14: Formula, 15: Multilevel, 16: Tags] */
                targetType: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyType"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Modules.Property.Models.View.CustomPropertyTypeConversionPreviewViewModel]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Modules.Property.Models.View.CustomPropertyTypeConversionPreviewViewModel]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Modules.Property.Models.View.CustomPropertyTypeConversionPreviewViewModel]"];
                };
            };
        };
    };
    GetCustomPropertyConversionRules: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Collections.Generic.Dictionary`2[System.Int32,System.Collections.Generic.Dictionary`2[System.Int32,System.Collections.Generic.List`1[Bakabase.Modules.StandardValue.Models.View.StandardValueConversionRuleViewModel]]]]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Collections.Generic.Dictionary`2[System.Int32,System.Collections.Generic.Dictionary`2[System.Int32,System.Collections.Generic.List`1[Bakabase.Modules.StandardValue.Models.View.StandardValueConversionRuleViewModel]]]]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Collections.Generic.Dictionary`2[System.Int32,System.Collections.Generic.Dictionary`2[System.Int32,System.Collections.Generic.List`1[Bakabase.Modules.StandardValue.Models.View.StandardValueConversionRuleViewModel]]]]"];
                };
            };
        };
    };
    ChangeCustomPropertyType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
                /** @description [1: SingleLineText, 2: MultilineText, 3: SingleChoice, 4: MultipleChoice, 5: Number, 6: Percentage, 7: Rating, 8: Boolean, 9: Link, 10: Attachment, 11: Date, 12: DateTime, 13: Time, 14: Formula, 15: Multilevel, 16: Tags] */
                type: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyType"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    EnableAddingNewDataDynamicallyForCustomProperty: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetCustomPropertyValueUsage: {
        parameters: {
            query?: {
                value?: string;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Int32]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Int32]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Int32]"];
                };
            };
        };
    };
    TestCustomPropertyTypeConversion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Modules.Property.Models.View.CustomPropertyTypeConversionExampleViewModel]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Modules.Property.Models.View.CustomPropertyTypeConversionExampleViewModel]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Modules.Property.Models.View.CustomPropertyTypeConversionExampleViewModel]"];
                };
            };
        };
    };
    GetStatistics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Models.Dtos.DashboardStatistics]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Models.Dtos.DashboardStatistics]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Models.Dtos.DashboardStatistics]"];
                };
            };
        };
    };
    GetAllDownloaderNamingDefinitions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Collections.Generic.Dictionary`2[System.Int32,Bakabase.InsideWorld.Models.Models.Aos.DownloaderNamingDefinitions]]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Collections.Generic.Dictionary`2[System.Int32,Bakabase.InsideWorld.Models.Models.Aos.DownloaderNamingDefinitions]]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Collections.Generic.Dictionary`2[System.Int32,Bakabase.InsideWorld.Models.Models.Aos.DownloaderNamingDefinitions]]"];
                };
            };
        };
    };
    GetAllDownloadTasks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.InsideWorld.Models.Models.Dtos.DownloadTaskDto]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.InsideWorld.Models.Models.Dtos.DownloadTaskDto]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.InsideWorld.Models.Models.Dtos.DownloadTaskDto]"];
                };
            };
        };
    };
    CreateDownloadTask: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.DownloadTaskCreateRequestModel"];
                "application/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.DownloadTaskCreateRequestModel"];
                "text/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.DownloadTaskCreateRequestModel"];
                "application/*+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.DownloadTaskCreateRequestModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetDownloadTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Models.Dtos.DownloadTaskDto]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Models.Dtos.DownloadTaskDto]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Models.Dtos.DownloadTaskDto]"];
                };
            };
        };
    };
    PutDownloadTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.InsideWorld.Models.Models.Entities.DownloadTask"];
                "application/json": components["schemas"]["Bakabase.InsideWorld.Models.Models.Entities.DownloadTask"];
                "text/json": components["schemas"]["Bakabase.InsideWorld.Models.Models.Entities.DownloadTask"];
                "application/*+json": components["schemas"]["Bakabase.InsideWorld.Models.Models.Entities.DownloadTask"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    RemoveDownloadTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    RemoveDownloadTasksByIds: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": number[];
                "application/json": number[];
                "text/json": number[];
                "application/*+json": number[];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    StartDownloadTasks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.DownloadTaskStartRequestModel"];
                "application/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.DownloadTaskStartRequestModel"];
                "text/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.DownloadTaskStartRequestModel"];
                "application/*+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.DownloadTaskStartRequestModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    StopDownloadTasks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": number[];
                "application/json": number[];
                "text/json": number[];
                "application/*+json": number[];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetResourceEnhancements: {
        parameters: {
            query?: {
                /** @description [0: None, 1: GeneratedPropertyValue] */
                additionalItem?: components["schemas"]["Bakabase.Modules.Enhancer.Abstractions.Models.Domain.Constants.EnhancementAdditionalItem"];
            };
            header?: never;
            path: {
                resourceId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.ResourceEnhancements]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.ResourceEnhancements]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.ResourceEnhancements]"];
                };
            };
        };
    };
    EnhanceResourceByEnhancer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                resourceId: number;
                enhancerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    DeleteResourceEnhancement: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                resourceId: number;
                enhancerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    ApplyEnhancementContextDataForResourceByEnhancer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                resourceId: number;
                enhancerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    ApplyEnhancementContextDataByEnhancerAndCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                categoryId: number;
                enhancerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    DeleteByEnhancementsMediaLibrary: {
        parameters: {
            query?: {
                deleteEmptyOnly?: boolean;
            };
            header?: never;
            path: {
                mediaLibraryId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    DeleteEnhancementsByCategory: {
        parameters: {
            query?: {
                deleteEmptyOnly?: boolean;
            };
            header?: never;
            path: {
                categoryId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    DeleteEnhancementsByCategoryAndEnhancer: {
        parameters: {
            query?: {
                deleteEmptyOnly?: boolean;
            };
            header?: never;
            path: {
                categoryId: number;
                enhancerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    DeleteEnhancementsByEnhancer: {
        parameters: {
            query?: {
                deleteEmptyOnly?: boolean;
            };
            header?: never;
            path: {
                enhancerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetAllEnhancerDescriptors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Modules.Enhancer.Abstractions.Components.IEnhancerDescriptor]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Modules.Enhancer.Abstractions.Components.IEnhancerDescriptor]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Modules.Enhancer.Abstractions.Components.IEnhancerDescriptor]"];
                };
            };
        };
    };
    GetTopLevelFileSystemEntryNames: {
        parameters: {
            query?: {
                root?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.FileSystemEntryNameViewModel]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.FileSystemEntryNameViewModel]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.FileSystemEntryNameViewModel]"];
                };
            };
        };
    };
    GetEntryTaskInfo: {
        parameters: {
            query?: {
                path?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Components.FileExplorer.Information.IwFsTaskInfo]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Components.FileExplorer.Information.IwFsTaskInfo]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Components.FileExplorer.Information.IwFsTaskInfo]"];
                };
            };
        };
    };
    GetIwFsInfo: {
        parameters: {
            query?: {
                path?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Components.FileExplorer.Information.IwFsEntryLazyInfo]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Components.FileExplorer.Information.IwFsEntryLazyInfo]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Components.FileExplorer.Information.IwFsEntryLazyInfo]"];
                };
            };
        };
    };
    GetIwFsEntry: {
        parameters: {
            query?: {
                path?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Components.FileExplorer.IwFsEntry]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Components.FileExplorer.IwFsEntry]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Components.FileExplorer.IwFsEntry]"];
                };
            };
        };
    };
    CreateDirectory: {
        parameters: {
            query?: {
                parent?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetChildrenIwFsInfo: {
        parameters: {
            query?: {
                root?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Components.FileExplorer.IwFsPreview]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Components.FileExplorer.IwFsPreview]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Components.FileExplorer.IwFsPreview]"];
                };
            };
        };
    };
    RemoveFiles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.FileRemoveRequestModel"];
                "application/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.FileRemoveRequestModel"];
                "text/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.FileRemoveRequestModel"];
                "application/*+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.FileRemoveRequestModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    RenameFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.FileRenameRequestModel"];
                "application/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.FileRenameRequestModel"];
                "text/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.FileRenameRequestModel"];
                "application/*+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.FileRenameRequestModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.String]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.String]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.String]"];
                };
            };
        };
    };
    OpenRecycleBin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    ExtractAndRemoveDirectory: {
        parameters: {
            query?: {
                directory?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    MoveEntries: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.FileMoveRequestModel"];
                "application/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.FileMoveRequestModel"];
                "text/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.FileMoveRequestModel"];
                "application/*+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.FileMoveRequestModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetSameNameEntriesInWorkingDirectory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.RemoveSameEntryInWorkingDirectoryRequestModel"];
                "application/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.RemoveSameEntryInWorkingDirectoryRequestModel"];
                "text/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.RemoveSameEntryInWorkingDirectoryRequestModel"];
                "application/*+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.RemoveSameEntryInWorkingDirectoryRequestModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.FileSystemEntryNameViewModel]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.FileSystemEntryNameViewModel]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.FileSystemEntryNameViewModel]"];
                };
            };
        };
    };
    RemoveSameNameEntryInWorkingDirectory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.RemoveSameEntryInWorkingDirectoryRequestModel"];
                "application/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.RemoveSameEntryInWorkingDirectoryRequestModel"];
                "text/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.RemoveSameEntryInWorkingDirectoryRequestModel"];
                "application/*+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.RemoveSameEntryInWorkingDirectoryRequestModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    StandardizeEntryName: {
        parameters: {
            query?: {
                path?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    PlayFile: {
        parameters: {
            query?: {
                fullname?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DecompressFiles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.FileDecompressRequestModel"];
                "application/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.FileDecompressRequestModel"];
                "text/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.FileDecompressRequestModel"];
                "application/*+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.FileDecompressRequestModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetIconData: {
        parameters: {
            query?: {
                path?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.String]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.String]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.String]"];
                };
            };
        };
    };
    GetAllFiles: {
        parameters: {
            query?: {
                path?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[System.String]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[System.String]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[System.String]"];
                };
            };
        };
    };
    GetCompressedFileEntries: {
        parameters: {
            query?: {
                compressedFilePath?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.InsideWorld.Business.Components.Compression.CompressedFileEntry]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.InsideWorld.Business.Components.Compression.CompressedFileEntry]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.InsideWorld.Business.Components.Compression.CompressedFileEntry]"];
                };
            };
        };
    };
    GetFileExtensionCounts: {
        parameters: {
            query?: {
                sampleFile?: string;
                rootPath?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Collections.Generic.Dictionary`2[System.String,System.Int32]]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Collections.Generic.Dictionary`2[System.String,System.Int32]]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Collections.Generic.Dictionary`2[System.String,System.Int32]]"];
                };
            };
        };
    };
    PreviewFileSystemEntriesGroupResult: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Service.Models.Input.FileSystemEntryGroupInputModel"];
                "application/json": components["schemas"]["Bakabase.Service.Models.Input.FileSystemEntryGroupInputModel"];
                "text/json": components["schemas"]["Bakabase.Service.Models.Input.FileSystemEntryGroupInputModel"];
                "application/*+json": components["schemas"]["Bakabase.Service.Models.Input.FileSystemEntryGroupInputModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Service.Models.View.FileSystemEntryGroupResultViewModel]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Service.Models.View.FileSystemEntryGroupResultViewModel]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Service.Models.View.FileSystemEntryGroupResultViewModel]"];
                };
            };
        };
    };
    MergeFileSystemEntries: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Service.Models.Input.FileSystemEntryGroupInputModel"];
                "application/json": components["schemas"]["Bakabase.Service.Models.Input.FileSystemEntryGroupInputModel"];
                "text/json": components["schemas"]["Bakabase.Service.Models.Input.FileSystemEntryGroupInputModel"];
                "application/*+json": components["schemas"]["Bakabase.Service.Models.Input.FileSystemEntryGroupInputModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    StartWatchingChangesInFileProcessorWorkspace: {
        parameters: {
            query?: {
                path?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    StopWatchingChangesInFileProcessorWorkspace: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    CheckPathIsFile: {
        parameters: {
            query?: {
                path?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Boolean]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Boolean]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Boolean]"];
                };
            };
        };
    };
    OpenFilesSelector: {
        parameters: {
            query?: {
                initialDirectory?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[System.String]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[System.String]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[System.String]"];
                };
            };
        };
    };
    OpenFileSelector: {
        parameters: {
            query?: {
                initialDirectory?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.String]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.String]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.String]"];
                };
            };
        };
    };
    OpenFolderSelector: {
        parameters: {
            query?: {
                initialDirectory?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.String]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.String]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.String]"];
                };
            };
        };
    };
    OpenUrlInDefaultBrowser: {
        parameters: {
            query?: {
                url?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetAllLogs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bootstrap.Components.Logging.LogService.Models.Entities.Log]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bootstrap.Components.Logging.LogService.Models.Entities.Log]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bootstrap.Components.Logging.LogService.Models.Entities.Log]"];
                };
            };
        };
    };
    ClearAllLog: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    SearchLogs: {
        parameters: {
            query?: {
                /** @description [0: Trace, 1: Debug, 2: Information, 3: Warning, 4: Error, 5: Critical, 6: None] */
                level?: components["schemas"]["Microsoft.Extensions.Logging.LogLevel"];
                startDt?: string;
                endDt?: string;
                logger?: string;
                event?: string;
                message?: string;
                pageIndex?: number;
                pageSize?: number;
                skipCount?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SearchResponse`1[Bootstrap.Components.Logging.LogService.Models.Entities.Log]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SearchResponse`1[Bootstrap.Components.Logging.LogService.Models.Entities.Log]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SearchResponse`1[Bootstrap.Components.Logging.LogService.Models.Entities.Log]"];
                };
            };
        };
    };
    GetUnreadLogCount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Int32]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Int32]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Int32]"];
                };
            };
        };
    };
    ReadLog: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    ReadAllLog: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetAllMediaLibraries: {
        parameters: {
            query?: {
                /** @description [0: None, 1: Category, 2: FileSystemInfo, 4: PathConfigurationBoundProperties] */
                additionalItems?: components["schemas"]["Bakabase.InsideWorld.Models.Constants.AdditionalItems.MediaLibraryAdditionalItem"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Abstractions.Models.Domain.MediaLibrary]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Abstractions.Models.Domain.MediaLibrary]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Abstractions.Models.Domain.MediaLibrary]"];
                };
            };
        };
    };
    AddMediaLibrary: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Abstractions.Models.Dto.MediaLibraryAddDto"];
                "application/json": components["schemas"]["Bakabase.Abstractions.Models.Dto.MediaLibraryAddDto"];
                "text/json": components["schemas"]["Bakabase.Abstractions.Models.Dto.MediaLibraryAddDto"];
                "application/*+json": components["schemas"]["Bakabase.Abstractions.Models.Dto.MediaLibraryAddDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetMediaLibrary: {
        parameters: {
            query?: {
                /** @description [0: None, 1: Category, 2: FileSystemInfo, 4: PathConfigurationBoundProperties] */
                additionalItems?: components["schemas"]["Bakabase.InsideWorld.Models.Constants.AdditionalItems.MediaLibraryAdditionalItem"];
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.Domain.MediaLibrary]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.Domain.MediaLibrary]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.Domain.MediaLibrary]"];
                };
            };
        };
    };
    PatchMediaLibrary: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Abstractions.Models.Dto.MediaLibraryPatchDto"];
                "application/json": components["schemas"]["Bakabase.Abstractions.Models.Dto.MediaLibraryPatchDto"];
                "text/json": components["schemas"]["Bakabase.Abstractions.Models.Dto.MediaLibraryPatchDto"];
                "application/*+json": components["schemas"]["Bakabase.Abstractions.Models.Dto.MediaLibraryPatchDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    DeleteMediaLibrary: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    StartSyncMediaLibrary: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    StopSyncMediaLibrary: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    ValidatePathConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Abstractions.Models.Domain.PathConfiguration"];
                "application/json": components["schemas"]["Bakabase.Abstractions.Models.Domain.PathConfiguration"];
                "text/json": components["schemas"]["Bakabase.Abstractions.Models.Domain.PathConfiguration"];
                "application/*+json": components["schemas"]["Bakabase.Abstractions.Models.Domain.PathConfiguration"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.Domain.PathConfigurationTestResult]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.Domain.PathConfigurationTestResult]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.Domain.PathConfigurationTestResult]"];
                };
            };
        };
    };
    SortMediaLibrariesInCategory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.IdBasedSortRequestModel"];
                "application/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.IdBasedSortRequestModel"];
                "text/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.IdBasedSortRequestModel"];
                "application/*+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.IdBasedSortRequestModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    AddMediaLibraryPathConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Abstractions.Models.Input.MediaLibraryPathConfigurationAddInputModel"];
                "application/json": components["schemas"]["Bakabase.Abstractions.Models.Input.MediaLibraryPathConfigurationAddInputModel"];
                "text/json": components["schemas"]["Bakabase.Abstractions.Models.Input.MediaLibraryPathConfigurationAddInputModel"];
                "application/*+json": components["schemas"]["Bakabase.Abstractions.Models.Input.MediaLibraryPathConfigurationAddInputModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    RemoveMediaLibraryPathConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.PathConfigurationRemoveRequestModel"];
                "application/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.PathConfigurationRemoveRequestModel"];
                "text/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.PathConfigurationRemoveRequestModel"];
                "application/*+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.PathConfigurationRemoveRequestModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    AddMediaLibrariesInBulk: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                cId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Abstractions.Models.Input.MediaLibraryAddInBulkInputModel"];
                "application/json": components["schemas"]["Bakabase.Abstractions.Models.Input.MediaLibraryAddInBulkInputModel"];
                "text/json": components["schemas"]["Bakabase.Abstractions.Models.Input.MediaLibraryAddInBulkInputModel"];
                "application/*+json": components["schemas"]["Bakabase.Abstractions.Models.Input.MediaLibraryAddInBulkInputModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    AddMediaLibraryRootPathsInBulk: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mlId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Abstractions.Models.Input.MediaLibraryRootPathsAddInBulkInputModel"];
                "application/json": components["schemas"]["Bakabase.Abstractions.Models.Input.MediaLibraryRootPathsAddInBulkInputModel"];
                "text/json": components["schemas"]["Bakabase.Abstractions.Models.Input.MediaLibraryRootPathsAddInBulkInputModel"];
                "application/*+json": components["schemas"]["Bakabase.Abstractions.Models.Input.MediaLibraryRootPathsAddInBulkInputModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    StartSyncingMediaLibraryResources: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetAppOptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Infrastructures.Components.Configurations.App.AppOptions]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Infrastructures.Components.Configurations.App.AppOptions]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Infrastructures.Components.Configurations.App.AppOptions]"];
                };
            };
        };
    };
    PatchAppOptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Infrastructures.Components.App.Models.RequestModels.AppOptionsPatchRequestModel"];
                "application/json": components["schemas"]["Bakabase.Infrastructures.Components.App.Models.RequestModels.AppOptionsPatchRequestModel"];
                "text/json": components["schemas"]["Bakabase.Infrastructures.Components.App.Models.RequestModels.AppOptionsPatchRequestModel"];
                "application/*+json": components["schemas"]["Bakabase.Infrastructures.Components.App.Models.RequestModels.AppOptionsPatchRequestModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetUIOptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.UIOptions]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.UIOptions]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.UIOptions]"];
                };
            };
        };
    };
    PatchUIOptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.UIOptionsPatchRequestModel"];
                "application/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.UIOptionsPatchRequestModel"];
                "text/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.UIOptionsPatchRequestModel"];
                "application/*+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.UIOptionsPatchRequestModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetBilibiliOptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.BilibiliOptions]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.BilibiliOptions]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.BilibiliOptions]"];
                };
            };
        };
    };
    PatchBilibiliOptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.BilibiliOptions"];
                "application/json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.BilibiliOptions"];
                "text/json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.BilibiliOptions"];
                "application/*+json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.BilibiliOptions"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetExHentaiOptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.ExHentaiOptions]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.ExHentaiOptions]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.ExHentaiOptions]"];
                };
            };
        };
    };
    PatchExHentaiOptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.ExHentaiOptions"];
                "application/json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.ExHentaiOptions"];
                "text/json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.ExHentaiOptions"];
                "application/*+json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.ExHentaiOptions"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetFileSystemOptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.FileSystemOptions]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.FileSystemOptions]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.FileSystemOptions]"];
                };
            };
        };
    };
    PatchFileSystemOptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.FileSystemOptions"];
                "application/json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.FileSystemOptions"];
                "text/json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.FileSystemOptions"];
                "application/*+json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.FileSystemOptions"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetJavLibraryOptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.JavLibraryOptions]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.JavLibraryOptions]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.JavLibraryOptions]"];
                };
            };
        };
    };
    PatchJavLibraryOptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.JavLibraryOptions"];
                "application/json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.JavLibraryOptions"];
                "text/json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.JavLibraryOptions"];
                "application/*+json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.JavLibraryOptions"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetPixivOptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.PixivOptions]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.PixivOptions]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.PixivOptions]"];
                };
            };
        };
    };
    PatchPixivOptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.PixivOptions"];
                "application/json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.PixivOptions"];
                "text/json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.PixivOptions"];
                "application/*+json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.PixivOptions"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetResourceOptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Configurations.Models.Domain.ResourceOptions]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Configurations.Models.Domain.ResourceOptions]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Business.Configurations.Models.Domain.ResourceOptions]"];
                };
            };
        };
    };
    PatchResourceOptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Service.Models.Input.ResourceOptionsPatchInputModel"];
                "application/json": components["schemas"]["Bakabase.Service.Models.Input.ResourceOptionsPatchInputModel"];
                "text/json": components["schemas"]["Bakabase.Service.Models.Input.ResourceOptionsPatchInputModel"];
                "application/*+json": components["schemas"]["Bakabase.Service.Models.Input.ResourceOptionsPatchInputModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetThirdPartyOptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.ThirdPartyOptions]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.ThirdPartyOptions]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.ThirdPartyOptions]"];
                };
            };
        };
    };
    PatchThirdPartyOptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.ThirdPartyOptions"];
                "application/json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.ThirdPartyOptions"];
                "text/json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.ThirdPartyOptions"];
                "application/*+json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.ThirdPartyOptions"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetNetworkOptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.NetworkOptions]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.NetworkOptions]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.NetworkOptions]"];
                };
            };
        };
    };
    PatchNetworkOptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.Options.NetworkOptionsPatchInputModel"];
                "application/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.Options.NetworkOptionsPatchInputModel"];
                "text/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.Options.NetworkOptionsPatchInputModel"];
                "application/*+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.Options.NetworkOptionsPatchInputModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetEnhancerOptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.EnhancerOptions]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.EnhancerOptions]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Configs.EnhancerOptions]"];
                };
            };
        };
    };
    PatchEnhancerOptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.EnhancerOptions"];
                "application/json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.EnhancerOptions"];
                "text/json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.EnhancerOptions"];
                "application/*+json": components["schemas"]["Bakabase.InsideWorld.Models.Configs.EnhancerOptions"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    SearchPasswords: {
        parameters: {
            query?: {
                /** @description [1: Latest, 2: Frequency] */
                order?: components["schemas"]["Bakabase.InsideWorld.Models.Constants.Aos.PasswordSearchOrder"];
                pageIndex?: number;
                pageSize?: number;
                skipCount?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SearchResponse`1[Bakabase.InsideWorld.Models.Models.Entities.Password]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SearchResponse`1[Bakabase.InsideWorld.Models.Models.Entities.Password]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SearchResponse`1[Bakabase.InsideWorld.Models.Models.Entities.Password]"];
                };
            };
        };
    };
    GetAllPasswords: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.InsideWorld.Models.Models.Entities.Password]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.InsideWorld.Models.Models.Entities.Password]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.InsideWorld.Models.Models.Entities.Password]"];
                };
            };
        };
    };
    DeletePassword: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                password: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetPlaylist: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Models.Dtos.PlaylistDto]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Models.Dtos.PlaylistDto]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Models.Dtos.PlaylistDto]"];
                };
            };
        };
    };
    DeletePlaylist: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetAllPlaylists: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.InsideWorld.Models.Models.Dtos.PlaylistDto]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.InsideWorld.Models.Models.Dtos.PlaylistDto]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.InsideWorld.Models.Models.Dtos.PlaylistDto]"];
                };
            };
        };
    };
    PutPlaylist: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.InsideWorld.Models.Models.Dtos.PlaylistDto"];
                "application/json": components["schemas"]["Bakabase.InsideWorld.Models.Models.Dtos.PlaylistDto"];
                "text/json": components["schemas"]["Bakabase.InsideWorld.Models.Models.Dtos.PlaylistDto"];
                "application/*+json": components["schemas"]["Bakabase.InsideWorld.Models.Models.Dtos.PlaylistDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    AddPlaylist: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.InsideWorld.Models.Models.Dtos.PlaylistDto"];
                "application/json": components["schemas"]["Bakabase.InsideWorld.Models.Models.Dtos.PlaylistDto"];
                "text/json": components["schemas"]["Bakabase.InsideWorld.Models.Models.Dtos.PlaylistDto"];
                "application/*+json": components["schemas"]["Bakabase.InsideWorld.Models.Models.Dtos.PlaylistDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetPlaylistFiles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[System.Collections.Generic.List`1[System.String]]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[System.Collections.Generic.List`1[System.String]]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[System.Collections.Generic.List`1[System.String]]"];
                };
            };
        };
    };
    GetPropertiesByPool: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description [1: Internal, 2: Reserved, 4: Custom, 7: All] */
                pool: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyPool"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Modules.Property.Models.View.PropertyViewModel]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Modules.Property.Models.View.PropertyViewModel]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Modules.Property.Models.View.PropertyViewModel]"];
                };
            };
        };
    };
    GetAvailablePropertyTypesForManuallySettingValue: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.PropertyTypeForManuallySettingValueViewModel]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.PropertyTypeForManuallySettingValueViewModel]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.PropertyTypeForManuallySettingValueViewModel]"];
                };
            };
        };
    };
    GetPropertyBizValue: {
        parameters: {
            query?: {
                dbValue?: string;
            };
            header?: never;
            path: {
                /** @description [1: Internal, 2: Reserved, 4: Custom, 7: All] */
                pool: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyPool"];
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.String]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.String]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.String]"];
                };
            };
        };
    };
    GetPropertyDbValue: {
        parameters: {
            query?: {
                bizValue?: string;
            };
            header?: never;
            path: {
                /** @description [1: Internal, 2: Reserved, 4: Custom, 7: All] */
                pool: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyPool"];
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.String]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.String]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.String]"];
                };
            };
        };
    };
    GetSearchOperationsForProperty: {
        parameters: {
            query?: {
                /** @description [1: Internal, 2: Reserved, 4: Custom, 7: All] */
                propertyPool?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyPool"];
                propertyId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Abstractions.Models.Domain.Constants.SearchOperation]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Abstractions.Models.Domain.Constants.SearchOperation]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Abstractions.Models.Domain.Constants.SearchOperation]"];
                };
            };
        };
    };
    GetFilterValueProperty: {
        parameters: {
            query?: {
                /** @description [1: Internal, 2: Reserved, 4: Custom, 7: All] */
                propertyPool?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.PropertyPool"];
                propertyId?: number;
                /** @description [1: Equals, 2: NotEquals, 3: Contains, 4: NotContains, 5: StartsWith, 6: NotStartsWith, 7: EndsWith, 8: NotEndsWith, 9: GreaterThan, 10: LessThan, 11: GreaterThanOrEquals, 12: LessThanOrEquals, 13: IsNull, 14: IsNotNull, 15: In, 16: NotIn, 17: Matches, 18: NotMatches] */
                operation?: components["schemas"]["Bakabase.Abstractions.Models.Domain.Constants.SearchOperation"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Modules.Property.Models.View.PropertyViewModel]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Modules.Property.Models.View.PropertyViewModel]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Modules.Property.Models.View.PropertyViewModel]"];
                };
            };
        };
    };
    GetLastResourceSearch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Service.Models.View.ResourceSearchViewModel]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Service.Models.View.ResourceSearchViewModel]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Service.Models.View.ResourceSearchViewModel]"];
                };
            };
        };
    };
    GetSavedSearches: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.SavedSearchViewModel]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.SavedSearchViewModel]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.SavedSearchViewModel]"];
                };
            };
        };
    };
    SaveNewResourceSearch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Service.Models.Input.SavedSearchAddInputModel"];
                "application/json": components["schemas"]["Bakabase.Service.Models.Input.SavedSearchAddInputModel"];
                "text/json": components["schemas"]["Bakabase.Service.Models.Input.SavedSearchAddInputModel"];
                "application/*+json": components["schemas"]["Bakabase.Service.Models.Input.SavedSearchAddInputModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    PutSavedSearchName: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                idx: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": string;
                "application/json": string;
                "text/json": string;
                "application/*+json": string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    DeleteSavedSearch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                idx: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    SearchResources: {
        parameters: {
            query?: {
                saveSearch?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Service.Models.Input.ResourceSearchInputModel"];
                "application/json": components["schemas"]["Bakabase.Service.Models.Input.ResourceSearchInputModel"];
                "text/json": components["schemas"]["Bakabase.Service.Models.Input.ResourceSearchInputModel"];
                "application/*+json": components["schemas"]["Bakabase.Service.Models.Input.ResourceSearchInputModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SearchResponse`1[Bakabase.Abstractions.Models.Domain.Resource]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SearchResponse`1[Bakabase.Abstractions.Models.Domain.Resource]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SearchResponse`1[Bakabase.Abstractions.Models.Domain.Resource]"];
                };
            };
        };
    };
    GetResourcesByKeys: {
        parameters: {
            query?: {
                ids?: number[];
                /** @description [0: None, 64: Alias, 128: Category, 160: CustomProperties, 416: DisplayName, 512: HasChildren, 1024: ReservedProperties, 2048: MediaLibraryName, 4096: Cache, 8160: All] */
                additionalItems?: components["schemas"]["Bakabase.InsideWorld.Models.Constants.AdditionalItems.ResourceAdditionalItem"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Abstractions.Models.Domain.Resource]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Abstractions.Models.Domain.Resource]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Abstractions.Models.Domain.Resource]"];
                };
            };
        };
    };
    OpenResourceDirectory: {
        parameters: {
            query?: {
                id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    DiscoverResourceCover: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SaveCover: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Service.Models.Input.ResourceCoverSaveInputModel"];
                "application/json": components["schemas"]["Bakabase.Service.Models.Input.ResourceCoverSaveInputModel"];
                "text/json": components["schemas"]["Bakabase.Service.Models.Input.ResourceCoverSaveInputModel"];
                "application/*+json": components["schemas"]["Bakabase.Service.Models.Input.ResourceCoverSaveInputModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetResourcePlayableFiles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[System.String]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[System.String]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[System.String]"];
                };
            };
        };
    };
    MoveResources: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.ResourceMoveRequestModel"];
                "application/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.ResourceMoveRequestModel"];
                "text/json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.ResourceMoveRequestModel"];
                "application/*+json": components["schemas"]["Bakabase.InsideWorld.Models.RequestModels.ResourceMoveRequestModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    ClearResourceTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetResourceDataForPreviewer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.InsideWorld.Models.Models.Aos.PreviewerItem]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.InsideWorld.Models.Models.Aos.PreviewerItem]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.InsideWorld.Models.Models.Aos.PreviewerItem]"];
                };
            };
        };
    };
    PutResourcePropertyValue: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Abstractions.Models.Input.ResourcePropertyValuePutInputModel"];
                "application/json": components["schemas"]["Bakabase.Abstractions.Models.Input.ResourcePropertyValuePutInputModel"];
                "text/json": components["schemas"]["Bakabase.Abstractions.Models.Input.ResourcePropertyValuePutInputModel"];
                "application/*+json": components["schemas"]["Bakabase.Abstractions.Models.Input.ResourcePropertyValuePutInputModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    PlayResourceFile: {
        parameters: {
            query?: {
                file?: string;
            };
            header?: never;
            path: {
                resourceId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    DeleteResourcesByKeys: {
        parameters: {
            query?: {
                ids?: number[];
                deleteFiles?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetUnknownResources: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Abstractions.Models.Domain.Resource]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Abstractions.Models.Domain.Resource]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Abstractions.Models.Domain.Resource]"];
                };
            };
        };
    };
    GetUnknownResourcesCount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Int32]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Int32]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Int32]"];
                };
            };
        };
    };
    PinResource: {
        parameters: {
            query?: {
                pin?: boolean;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    TransferResourceData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Abstractions.Models.Input.ResourceTransferInputModel"];
                "application/json": components["schemas"]["Bakabase.Abstractions.Models.Input.ResourceTransferInputModel"];
                "text/json": components["schemas"]["Bakabase.Abstractions.Models.Input.ResourceTransferInputModel"];
                "application/*+json": components["schemas"]["Bakabase.Abstractions.Models.Input.ResourceTransferInputModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    SearchResourcePaths: {
        parameters: {
            query?: {
                keyword?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.ResourcePathInfoViewModel]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.ResourcePathInfoViewModel]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.ListResponse`1[Bakabase.Service.Models.View.ResourcePathInfoViewModel]"];
                };
            };
        };
    };
    GetAllSpecialTexts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Collections.Generic.Dictionary`2[System.Int32,System.Collections.Generic.List`1[Bakabase.Abstractions.Models.Domain.SpecialText]]]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Collections.Generic.Dictionary`2[System.Int32,System.Collections.Generic.List`1[Bakabase.Abstractions.Models.Domain.SpecialText]]]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Collections.Generic.Dictionary`2[System.Int32,System.Collections.Generic.List`1[Bakabase.Abstractions.Models.Domain.SpecialText]]]"];
                };
            };
        };
    };
    AddSpecialText: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Abstractions.Models.Input.SpecialTextAddInputModel"];
                "application/json": components["schemas"]["Bakabase.Abstractions.Models.Input.SpecialTextAddInputModel"];
                "text/json": components["schemas"]["Bakabase.Abstractions.Models.Input.SpecialTextAddInputModel"];
                "application/*+json": components["schemas"]["Bakabase.Abstractions.Models.Input.SpecialTextAddInputModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.Domain.SpecialText]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.Domain.SpecialText]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Abstractions.Models.Domain.SpecialText]"];
                };
            };
        };
    };
    PatchSpecialText: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Bakabase.Abstractions.Models.Input.SpecialTextPatchInputModel"];
                "application/json": components["schemas"]["Bakabase.Abstractions.Models.Input.SpecialTextPatchInputModel"];
                "text/json": components["schemas"]["Bakabase.Abstractions.Models.Input.SpecialTextPatchInputModel"];
                "application/*+json": components["schemas"]["Bakabase.Abstractions.Models.Input.SpecialTextPatchInputModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    DeleteSpecialText: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    AddSpecialTextPrefabs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    PretreatText: {
        parameters: {
            query?: {
                text?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.String]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.String]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.String]"];
                };
            };
        };
    };
    GetAllThirdPartyRequestStatistics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Models.Aos.ThirdPartyRequestStatistics[]]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Models.Aos.ThirdPartyRequestStatistics[]]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.InsideWorld.Models.Models.Aos.ThirdPartyRequestStatistics[]]"];
                };
            };
        };
    };
    OpenFileOrDirectory: {
        parameters: {
            query?: {
                path?: string;
                openInDirectory?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    ValidateCookie: {
        parameters: {
            query?: {
                /** @description [1: BiliBili, 2: ExHentai, 3: Pixiv] */
                target?: components["schemas"]["Bakabase.InsideWorld.Models.Constants.CookieValidatorTarget"];
                cookie?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    GetThumbnail: {
        parameters: {
            query?: {
                path?: string;
                w?: number;
                h?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TestMatchAll: {
        parameters: {
            query?: {
                regex?: string;
                text?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Collections.Generic.Dictionary`2[System.String,System.Collections.Generic.List`1[System.String]]]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Collections.Generic.Dictionary`2[System.String,System.Collections.Generic.List`1[System.String]]]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[System.Collections.Generic.Dictionary`2[System.String,System.Collections.Generic.List`1[System.String]]]"];
                };
            };
        };
    };
    GetNewAppVersion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Infrastructures.Components.App.Upgrade.Abstractions.AppVersionInfo]"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Infrastructures.Components.App.Upgrade.Abstractions.AppVersionInfo]"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.SingletonResponse`1[Bakabase.Infrastructures.Components.App.Upgrade.Abstractions.AppVersionInfo]"];
                };
            };
        };
    };
    StartUpdatingApp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    StopUpdatingApp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
    RestartAndUpdateApp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "application/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                    "text/json": components["schemas"]["Bootstrap.Models.ResponseModels.BaseResponse"];
                };
            };
        };
    };
}
