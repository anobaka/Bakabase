name: Build and Deploy

on:
  push:
    branches: [ main, 'release/v*', 'debug-actions' ]
    tags:
      - 'v*'
  # pull_request:
  #   branches: [ main, 'dev/v*' ]
  workflow_dispatch:
  #   inputs:
  #     tag:
  #       description: 'tag (e.g., v1.2.3, 1.2.3, v1.2.3-alpha)'
  #       required: true
  #       type: string

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-var.outputs.version }}
      is_tag: ${{ steps.set-var.outputs.is_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get NBGV version info
        id: nbvg
        uses: dotnet/nbgv@master
        with:
          setAllVars: true

      - name: Set version and tag info
        id: set-var
        run: |
          echo "version=${{ env.NBGV_CloudBuildNumber }}" >> $GITHUB_OUTPUT
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "is_tag=true" >> $GITHUB_OUTPUT
          else
            echo "is_tag=false" >> $GITHUB_OUTPUT
          fi
      - name: Debug prepare context
        run: |
          echo "github.event_name=${{ github.event_name }}"
          echo "github.ref=${GITHUB_REF}"
          echo "github.ref_name=${{ github.ref_name }}"
          echo "resolved.version=${{ steps.set-var.outputs.version }}"
          echo "resolved.is_tag=${{ steps.set-var.outputs.is_tag }}"

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Yarn
        uses: actions/cache@v4
        with:
          path: |
            src/web/.yarn/cache
            src/web/node_modules
          key: yarn-${{ runner.os }}-${{ hashFiles('src/web/yarn.lock') }}
          restore-keys: |
            yarn-${{ runner.os }}-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Enable corepack
        run: corepack enable yarn

      - name: Install yarn dependencies
        working-directory: src/web
        run: yarn install

      - name: Build frontend
        working-directory: src/web
        run: yarn build

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: fe
          path: src/web/dist/*
        
  build:
    runs-on: ${{ matrix.os }}
    needs: [prepare, build-frontend]
    strategy:
      matrix:
        include:
          - os: windows-latest
            rid: win-x64
            artifact: win-x64
            csproj: Bakabase/src/Bakabase/Bakabase.csproj
            nuget-path: ~\\.nuget\\packages
            runtimeMode: WINFORMS
          - os: ubuntu-latest
            rid: linux-x64
            artifact: docker
            csproj: Bakabase/src/Bakabase.Service/Bakabase.Service.csproj
            nuget-path: ~/.nuget/packages
            runtimeMode: DOCKER
    steps:
      - name: Checkout main repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags
          path: ${{ github.event.repository.name }}
      - name: Clone Bakabase.Infrastructures
        run: git clone https://github.com/anobaka/Bakabase.Infrastructures.git
      - name: Clone LazyMortal
        run: git clone https://github.com/anobaka/LazyMortal.git
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ${{ matrix.nuget-path }}
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-
      - name: Build Bakabase project
        run: dotnet publish -p:RuntimeMode=${{ matrix.runtimeMode }} ${{matrix.csproj}} --self-contained -r ${{ matrix.rid }} -o ./publish
      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: fe
          path: ./publish/web
      - name: Ensure config directory exists
        run: mkdir -p ./publish/AppData/configs
      - name: create-json
        uses: jsdaniell/create-json@v1.2.3
        with:
          name: "updater.json"
          json: ${{ secrets.UPDATER_JSON }}
          dir: ./publish/AppData/configs
      - name: Upload Bakabase build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ./publish/*
      - name: Uploaded artifact debug
        run: |
          echo "Uploaded artifact name=${{ matrix.artifact }}"
          echo "Total files: $(find ./publish -type f | wc -l)"

  deploy-oss:
    runs-on: ubuntu-latest
    needs: [ prepare, build ]
    strategy:
      matrix:
        include:
          - artifact: win-x64
    steps:
      - name: Download Bakabase build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: .
      - name: Show downloaded artifact contents
        run: |
          echo "Downloaded artifact to $(pwd)"
          ls -al | sed -n '1,200p'

      - name: Install ossutil
        run: |
          wget -O ossutil64 https://gosspublic.alicdn.com/ossutil/1.7.16/ossutil64
          chmod +x ossutil64

      - name: Upload all files to OSS
        env:
          OSS_ACCESS_KEY_ID: ${{ secrets.OSS_ACCESS_KEY_ID }}
          OSS_ACCESS_KEY_SECRET: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
          OSS_ENDPOINT: http://oss-accelerate.aliyuncs.com
        run: |
          ./ossutil64 config -e $OSS_ENDPOINT -i $OSS_ACCESS_KEY_ID -k $OSS_ACCESS_KEY_SECRET
          ./ossutil64 cp -rf . oss://anobaka-public/app/bakabase/inside-world/${{ needs.prepare.outputs.version }}/unpacked/win/

      - name: Zip all files
        run: |
          zip -r bakabase.zip .
      - name: Show zip info
        run: |
          ls -lh bakabase.zip || true

      - name: Upload zip to OSS
        run: |
          ./ossutil64 cp bakabase.zip oss://anobaka-public/app/bakabase/inside-world/${{ needs.prepare.outputs.version }}/installer/bakabase.zip

  deploy-docker:
    runs-on: ubuntu-latest
    needs: [ prepare, build, build-frontend ]
    steps:
      - name: Checkout main repo
        uses: actions/checkout@v4
        
      - name: Download Bakabase build artifact
        uses: actions/download-artifact@v4
        with:
          name: docker
          path: ./publish

      - name: Set Docker build context
        id: docker_context
        run: |
          echo "DOCKERFILE=docker/Dockerfile" >> $GITHUB_ENV
          echo "DOCKER_TAG=${{ needs.prepare.outputs.version }}" >> $GITHUB_ENV
      - name: Show working directory
        run: |
          echo "Working directory: $(pwd)"
          echo "------------------------------------------"
      - name: Build Docker image
        run: |
          echo "Building Docker image 'bakabase:${DOCKER_TAG}' using Dockerfile '${DOCKERFILE}'..."
          docker build --progress=plain -f "${DOCKERFILE}" -t bakabase:${DOCKER_TAG} ./publish
          echo "Docker image 'bakabase:${DOCKER_TAG}' built successfully"
      - name: Show local docker images (top)
        run: |
          docker images | sed -n '1,50p' || true
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
      - name: Tag and push Docker image
        run: |
          docker tag bakabase:${DOCKER_TAG} ${{ secrets.DOCKERHUB_USERNAME }}/bakabase:${DOCKER_TAG}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/bakabase:${DOCKER_TAG}

  release:
    runs-on: ubuntu-latest
    needs: [ prepare, build ]
    steps:
      - uses: actions/checkout@v4   # âœ… pull code into workspace
        with:
          fetch-depth: 0

      - name: Debug release context
        run: |
          echo "event=${{ github.event_name }}"
          echo "ref=${{ github.ref }}"
          echo "ref_name=${{ github.ref_name }}"
          echo "nbgv.version=${{ needs.prepare.outputs.version }}"
      - name: Find previous release tag
        id: previous
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const current = "${{ needs.prepare.outputs.version }}";
            const isPrerelease = /(?:beta|rc)/i.test(current);
            const { owner, repo } = context.repo;
            const releases = await github.paginate(github.rest.repos.listReleases, { owner, repo, per_page: 100 });
            const allCandidates = releases.filter(r => !r.draft && r.tag_name && r.tag_name !== current);
            const stableCandidates = allCandidates.filter(r => !r.prerelease);
            let candidates = isPrerelease ? allCandidates : stableCandidates;
            let prev = candidates[0]?.tag_name;
            if (!prev && allCandidates.length > 0) {
              prev = allCandidates.find(r => r.tag_name && r.tag_name !== current)?.tag_name;
            }
            if (!prev) {
              const { execSync } = require('node:child_process');
              try {
                prev = execSync('git describe --tags --abbrev=0', { encoding: 'utf8' }).trim();
              } catch {}
            }
            if (!prev) {
              throw new Error('No previous tag found from releases or tags');
            }
            core.setOutput('previous_tag', prev);

      - name: Generate initial context (git-cliff)
        id: cliff_initial
        uses: orhun/git-cliff-action@v4
        with:
          config: cliff.toml
          args: -v ${{ steps.previous.outputs.previous_tag }}..${{ github.sha }} --context
        env:
          OUTPUT: cliff.context.initial.json

      - name: Enrich cliff context
        id: ctx
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const fs = require('node:fs');
            const path = 'cliff.context.initial.json';
            const text = fs.readFileSync(path, { encoding: 'utf8' });
            const initial = JSON.parse(text || '{}')[0];

            const issues = {};
            const { owner, repo } = context.repo;

            const numberSet = new Set();
            for (const commit of Array.isArray(initial.commits) ? initial.commits : []) {
              const links = Array.isArray(commit.links) ? commit.links : [];
              for (const link of links) {
                const m = /#(\d+)/.exec(link.text || '');
                if (m) {
                  numberSet.add(m[1]);
                }
              }
            }

            for (const num of numberSet) {
              try {
                const { data } = await github.rest.issues.get({ owner, repo, issue_number: Number(num) });
                const info = { title: data.title, url: data.html_url, number: data.number, state: data.state };
                issues[num] = info;
                issues['#' + num] = info;
              } catch (e) {
                core.warning(`Failed to fetch issue #${num}: ${e.message}`);
              }
            }

            for (const commit of Array.isArray(initial.commits) ? initial.commits : []) {
              const links = Array.isArray(commit.links) ? commit.links : [];
              const list = [];
              for (const link of links) {
                const m = /#(\d+)/.exec(link.text || '');
                if (m) {
                  const n = m[1];
                  const issue = issues[n] || issues['#' + n] || null;
                  list.push(issue);
                }
              }
              commit.extra ??= {};
              commit.extra["issues"] = list;
            }

            initial.version = "${{ needs.prepare.outputs.version }}";
            // set changelog timestamp as Unix seconds from current commit, fallback to now
            try {
              const { data: c } = await github.rest.repos.getCommit({ owner, repo, ref: context.sha });
              const dateStr = c?.commit?.committer?.date || null;
              const seconds = dateStr ? Math.floor(new Date(dateStr).getTime() / 1000) : Math.floor(Date.now() / 1000);
              initial.timestamp = seconds;
            } catch (e) {
              core.warning(`Failed to resolve commit timestamp: ${e.message}`);
              initial.timestamp = Math.floor(Date.now() / 1000);
            }
            const json = JSON.stringify([initial]);
            fs.writeFileSync('cliff.context.enriched.json', json);
            core.setOutput('context', json);
            core.setOutput('context_path', 'cliff.context.enriched.json');
            console.log(JSON.stringify(initial, null, 2));

      - name: Generate final changelog (with context)
        id: cliff_final
        uses: orhun/git-cliff-action@v4
        with:
          config: cliff.toml
          args: --from-context cliff.context.enriched.json
        env:
          OUTPUT: CHANGELOG_${{ needs.prepare.outputs.version }}.md
      - name: Upload changelog artifact
        uses: actions/upload-artifact@v4
        with:
          name: changelog-md
          path: CHANGELOG_${{ needs.prepare.outputs.version }}.md
      - name: Download artifact (win-x64)
        uses: actions/download-artifact@v4
        with:
          name: win-x64
          path: ./artifacts/win-x64
        continue-on-error: true
      - name: Show win-x64 artifact tree
        if: hashFiles('artifacts/win-x64/**') != ''
        run: |
          echo "Listing ./artifacts/win-x64"
          ls -alR ./artifacts/win-x64 | sed -n '1,200p'
      - name: Zip win-x64 artifact
        if: hashFiles('artifacts/win-x64/**') != ''
        run: |
          cd ./artifacts/win-x64
          zip -r ../../bakabase-${{ needs.prepare.outputs.version }}-win-x64.zip .
      - name: Show zipped asset info
        if: hashFiles('artifacts/win-x64/**') != ''
        run: |
          ls -lh bakabase-${{ needs.prepare.outputs.version }}-win-x64.zip || true
      - name: Determine release tag
        id: release_tag
        run: |
          TAG="${{ needs.prepare.outputs.version }}"
          echo "name=$TAG" >> $GITHUB_OUTPUT
          echo "Resolved release tag: $TAG"
      - name: Determine prerelease flag
        id: prerelease
        run: |
          v="${{ needs.prepare.outputs.version }}"
          v="${v,,}"
          if [[ "$v" == *beta* || "$v" == *rc* ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi
      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.version }}
          target_commitish: ${{ github.sha }}
          body_path: CHANGELOG_${{ needs.prepare.outputs.version }}.md
          prerelease: ${{ steps.prerelease.outputs.prerelease == 'true' }}
          files: |
            bakabase-${{ needs.prepare.outputs.version }}-win-x64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  generate-readme-oss:
    runs-on: ubuntu-latest
    needs: [ prepare, release ]
    steps:
      - name: Download changelog artifact
        uses: actions/download-artifact@v4
        with:
          name: changelog-md
          path: .
      - name: Create README.md
        run: cp "CHANGELOG_${{ needs.prepare.outputs.version }}.md" README.md
      - name: Install ossutil
        run: |
          wget -O ossutil64 https://gosspublic.alicdn.com/ossutil/1.7.16/ossutil64
          chmod +x ossutil64
      - name: Upload README.md to OSS
        env:
          OSS_ACCESS_KEY_ID: ${{ secrets.OSS_ACCESS_KEY_ID }}
          OSS_ACCESS_KEY_SECRET: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
          OSS_ENDPOINT: http://oss-accelerate.aliyuncs.com
        run: |
          ./ossutil64 config -e $OSS_ENDPOINT -i $OSS_ACCESS_KEY_ID -k $OSS_ACCESS_KEY_SECRET
          ./ossutil64 cp README.md oss://anobaka-public/app/bakabase/inside-world/${{ needs.prepare.outputs.version }}/README.md