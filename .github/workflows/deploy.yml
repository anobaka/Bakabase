name: Build and Deploy

on:
  push:
    branches: [ main, 'dev/v*', 'debug-actions' ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, 'dev/v*' ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag (e.g., v1.2.3, 1.2.3, v1.2.3-alpha)'
        required: true
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-var.outputs.version }}
      is_tag: ${{ steps.set-var.outputs.is_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get NBGV version info
        id: nbvg
        uses: dotnet/nbgv@master
        with:
          setAllVars: true

      - name: Set version and tag info
        id: set-var
        run: |
          echo "version=${{ env.NBGV_CloudBuildNumber }}" >> $GITHUB_OUTPUT
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "is_tag=true" >> $GITHUB_OUTPUT
          else
            echo "is_tag=false" >> $GITHUB_OUTPUT
          fi
      - name: Debug prepare context
        run: |
          echo "github.event_name=${{ github.event_name }}"
          echo "github.ref=${GITHUB_REF}"
          echo "github.ref_name=${{ github.ref_name }}"
          echo "resolved.version=${{ steps.set-var.outputs.version }}"
          echo "resolved.is_tag=${{ steps.set-var.outputs.is_tag }}"

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Yarn
        uses: actions/cache@v4
        with:
          path: |
            src/web/.yarn/cache
            src/web/node_modules
          key: yarn-${{ runner.os }}-${{ hashFiles('src/web/yarn.lock') }}
          restore-keys: |
            yarn-${{ runner.os }}-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Enable corepack
        run: corepack enable yarn

      - name: Install yarn dependencies
        working-directory: src/web
        run: yarn install

      - name: Build frontend
        working-directory: src/web
        run: yarn build

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: fe
          path: src/web/dist/*
        
  build:
    runs-on: ${{ matrix.os }}
    needs: [prepare, build-frontend]
    strategy:
      matrix:
        include:
          - os: windows-latest
            rid: win-x64
            artifact: win-x64
            csproj: Bakabase/src/Bakabase/Bakabase.csproj
            nuget-path: ~\\.nuget\\packages
            runtimeMode: WINFORMS
          - os: ubuntu-latest
            rid: linux-x64
            artifact: docker
            csproj: Bakabase/src/Bakabase.Service/Bakabase.Service.csproj
            nuget-path: ~/.nuget/packages
            runtimeMode: DOCKER
    steps:
      - name: Checkout main repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags
          path: ${{ github.event.repository.name }}
      - name: Clone Bakabase.Infrastructures
        run: git clone https://github.com/anobaka/Bakabase.Infrastructures.git
      - name: Clone LazyMortal
        run: git clone https://github.com/anobaka/LazyMortal.git
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ${{ matrix.nuget-path }}
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-
      - name: Build Bakabase project
        run: dotnet publish -p:RuntimeMode=${{ matrix.runtimeMode }} ${{matrix.csproj}} --self-contained -r ${{ matrix.rid }} -o ./publish
      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: fe
          path: ./publish/web
      - name: Ensure config directory exists
        run: mkdir -p ./publish/AppData/configs
      - name: create-json
        uses: jsdaniell/create-json@v1.2.3
        with:
          name: "updater.json"
          json: ${{ secrets.UPDATER_JSON }}
          dir: ./publish/AppData/configs
      - name: Upload Bakabase build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ./publish/*
      - name: Uploaded artifact debug
        run: |
          echo "Uploaded artifact name=${{ matrix.artifact }}"
          echo "Total files: $(find ./publish -type f | wc -l)"

  deploy-oss:
    runs-on: ubuntu-latest
    needs: [ prepare, build ]
    strategy:
      matrix:
        include:
          - artifact: win-x64
    steps:
      - name: Download Bakabase build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: .
      - name: Show downloaded artifact contents
        run: |
          echo "Downloaded artifact to $(pwd)"
          ls -al | sed -n '1,200p'

      - name: Install ossutil
        run: |
          wget -O ossutil64 https://gosspublic.alicdn.com/ossutil/1.7.16/ossutil64
          chmod +x ossutil64

      - name: Upload all files to OSS
        env:
          OSS_ACCESS_KEY_ID: ${{ secrets.OSS_ACCESS_KEY_ID }}
          OSS_ACCESS_KEY_SECRET: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
          OSS_ENDPOINT: http://oss-accelerate.aliyuncs.com
        run: |
          ./ossutil64 config -e $OSS_ENDPOINT -i $OSS_ACCESS_KEY_ID -k $OSS_ACCESS_KEY_SECRET
          ./ossutil64 cp -rf . oss://anobaka-public/app/bakabase/inside-world/${{ needs.prepare.outputs.version }}/unpacked/win/

      - name: Zip all files
        run: |
          zip -r bakabase.zip .
      - name: Show zip info
        run: |
          ls -lh bakabase.zip || true

      - name: Upload zip to OSS
        run: |
          ./ossutil64 cp bakabase.zip oss://anobaka-public/app/bakabase/inside-world/${{ needs.prepare.outputs.version }}/installer/bakabase.zip

  deploy-docker:
    runs-on: ubuntu-latest
    needs: [ prepare, build, build-frontend ]
    steps:
      - name: Checkout main repo
        uses: actions/checkout@v4
        
      - name: Download Bakabase build artifact
        uses: actions/download-artifact@v4
        with:
          name: docker
          path: ./publish

      - name: Set Docker build context
        id: docker_context
        run: |
          echo "DOCKERFILE=docker/Dockerfile" >> $GITHUB_ENV
          echo "DOCKER_TAG=${{ needs.prepare.outputs.version }}" >> $GITHUB_ENV
      - name: Show working directory
        run: |
          echo "Working directory: $(pwd)"
          echo "------------------------------------------"
      - name: Build Docker image
        run: |
          echo "Building Docker image 'bakabase:${DOCKER_TAG}' using Dockerfile '${DOCKERFILE}'..."
          docker build --progress=plain -f "${DOCKERFILE}" -t bakabase:${DOCKER_TAG} ./publish
          echo "Docker image 'bakabase:${DOCKER_TAG}' built successfully"
      - name: Show local docker images (top)
        run: |
          docker images | sed -n '1,50p' || true
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
      - name: Tag and push Docker image
        run: |
          docker tag bakabase:${DOCKER_TAG} ${{ secrets.DOCKERHUB_USERNAME }}/bakabase:${DOCKER_TAG}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/bakabase:${DOCKER_TAG}

  release-please:
    runs-on: ubuntu-latest
    needs: [ prepare, build ]
    steps:
      - uses: actions/checkout@v4   # âœ… pull code into workspace

      - name: Debug release context
        run: |
          echo "event=${{ github.event_name }}"
          echo "ref=${{ github.ref }}"
          echo "ref_name=${{ github.ref_name }}"
          echo "nbgv.version=${{ needs.prepare.outputs.version }}"
      - name: Get version from nbgv & update manifest
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          echo "Using version from nbgv: $VERSION"
          jq --arg v "$VERSION" '.["."]=$v' .release-please-manifest.json > tmp && mv tmp .release-please-manifest.json
      - name: Debug manifest
        run: |
          echo "Manifest:"
          cat .release-please-manifest.json
      - name: Run release-please (manifest)
        id: rp
        uses: googleapis/release-please-action@v4
        with:
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json
          token: ${{ secrets.GITHUB_TOKEN }}
          target-branch: ${{ github.ref_name }}
      - name: Download artifact (win-x64)
        uses: actions/download-artifact@v4
        with:
          name: win-x64
          path: ./artifacts/win-x64
        continue-on-error: true
      - name: Show win-x64 artifact tree
        if: hashFiles('artifacts/win-x64/**') != ''
        run: |
          echo "Listing ./artifacts/win-x64"
          ls -alR ./artifacts/win-x64 | sed -n '1,200p'
      - name: Zip win-x64 artifact
        if: hashFiles('artifacts/win-x64/**') != ''
        run: |
          cd ./artifacts/win-x64
          zip -r ../../bakabase-${{ needs.prepare.outputs.version }}-win-x64.zip .
      - name: Show zipped asset info
        if: hashFiles('artifacts/win-x64/**') != ''
        run: |
          ls -lh bakabase-${{ needs.prepare.outputs.version }}-win-x64.zip || true
      - name: Determine release tag
        id: release_tag
        run: |
          TAG="${{ needs.prepare.outputs.version }}"
          echo "name=$TAG" >> $GITHUB_OUTPUT
          echo "Resolved release tag: $TAG"
      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.version }}
          files: |
            bakabase-${{ needs.prepare.outputs.version }}-win-x64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}